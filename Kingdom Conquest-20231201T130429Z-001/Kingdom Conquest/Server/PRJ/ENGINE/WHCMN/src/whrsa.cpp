// Copyright (C) PixelGame, http://www.pixelgame.com
// All rights reserved.
// namespace    : n_whcmn
// File         : whrsa.cpp
// Creator      : Wei Hua (魏华)
// Comment      : RSA加密、解密对象
// CreationDate : 2007-09-12
// ChangeLOG    : 

#include "../inc/whrsa.h"
#include "../inc/whdes.h"
#include "../inc/whmd5.h"
#include "../inc/whvector.h"
#include "../inc/whfile.h"
#include "../inc/whtime.h"
#include <cryptlib/randpool.h>
#include <cryptlib/hex.h>
#include <cryptlib/filters.h>
#include <cryptlib/rsa.h>
USING_NAMESPACE(CryptoPP)

namespace n_whcmn
{

////////////////////////////////////////////////////////////////////
// WHRSA
////////////////////////////////////////////////////////////////////
// 生成私钥和公钥
int   WHRSAGen(const void *pPass, int nPassSize, void *pKeyPri, int *pnPriLen, void *pKeyPub, int *pnPubLen, const char *cszSeed, int nKeyLen)
{
	RandomPool randPool;
	if( cszSeed==NULL )
	{
		char	szT[64];
		sprintf(szT, "%ld", wh_time());
		randPool.Put((byte *)szT, strlen(szT));
	}
	else
	{
		randPool.Put((byte *)cszSeed, strlen(cszSeed));
	}

	RSAES_OAEP_SHA_Decryptor priv(randPool, nKeyLen);
	byte	bufPri[4096];
	ArraySink	ASPri(bufPri, sizeof(bufPri));
	priv.DEREncode(ASPri);
	*pnPriLen	= (int)ASPri.TotalPutLength();
	memcpy(pKeyPri, bufPri, *pnPriLen);
	// 简单加密
	if( nPassSize>0 )
	{
		WHDES_XOR_AC_EN((unsigned char *)pKeyPri, *pnPriLen, (const unsigned char *)pPass, nPassSize);
	}

	RSAES_OAEP_SHA_Encryptor pub(priv);
	byte	bufPub[4096];
	ArraySink	ASPub(bufPub, sizeof(bufPub));
	pub.DEREncode(ASPub);
	*pnPubLen	= (int)ASPub.TotalPutLength();
	memcpy(pKeyPub, bufPub, *pnPubLen);
	// 简单加密
	if( nPassSize>0 )
	{
		WHDES_XOR_AC_EN((unsigned char *)pKeyPub, *pnPubLen, (const unsigned char *)pPass, nPassSize);
	}

	return	0;
}

class   WHRSA_Base	: public WHRSA
{
protected:
	RandomPool		m_randPool;
	unsigned char	m_szPass[64];
	int				m_nPass;
public:
	WHRSA_Base()
		: m_nPass(0)
	{
		m_szPass[0]	= 0;
	}
	virtual int	InitFromKeyFile(const void *pPass, int nPassSize, const char *pszKeyFile, const char *cszSeed)
	{
		whvector<char>	vect;
		int	rst	= whfile_crc_readfile(pszKeyFile, vect);
		if( rst<0 )
		{
			return	-100 + rst;
		}
		return	Init(pPass, nPassSize, vect.getbuf(), vect.size(), cszSeed);
	}
	void	SetRand(const char *cszSeed=NULL)
	{
		if( cszSeed==NULL )
		{
			char	szT[64];
			sprintf(szT, "%ld", wh_time());
			m_randPool.Put((byte *)szT, strlen(szT));
		}
		else
		{
			m_randPool.Put((byte *)cszSeed, strlen(cszSeed));
		}
	}
	void	SetPass(const void *pPass, int nPassSize)
	{
		if( nPassSize>(int)sizeof(m_szPass) )
		{
			nPassSize	= (int)sizeof(m_szPass);
		}
		m_nPass			= nPassSize;
		memcpy(m_szPass, pPass, m_nPass);
	}
	void	DePass(const void *pBuf, int nSize, whvector<unsigned char> &vect)
	{
		vect.resize(nSize);
		memcpy(vect.getbuf(), pBuf, nSize);
		if( m_nPass>0 )
		{
			WHDES_XOR_AC_DE(vect.getbuf(), nSize, m_szPass, m_nPass);
		}
	}
	void	EnPass(void *pBuf, int nSize)
	{
		if( m_nPass>0 )
		{
			WHDES_XOR_AC_EN((unsigned char *)pBuf, nSize, m_szPass, m_nPass);
		}
	}
	void	DePass(void *pBuf, int nSize)
	{
		if( m_nPass>0 )
		{
			WHDES_XOR_AC_DE((unsigned char *)pBuf, nSize, m_szPass, m_nPass);
		}
	}
};

class   WHRSA_Encoder	: public WHRSA_Base
{
private:
	RSAES_OAEP_SHA_Encryptor	*m_pEncryptor;
public:
	WHRSA_Encoder()
		: m_pEncryptor(NULL)
	{
	}
	~WHRSA_Encoder()
	{
		if( m_pEncryptor )
		{
			delete	m_pEncryptor;
			m_pEncryptor	= NULL;
		}
	}
	virtual	void	SelfDestroy()
	{
		delete	this;
	}
	virtual int	Init(const void *pPass, int nPassSize, const void *pKey, int nKeySize, const char *cszSeed)
	{
		SetRand(cszSeed);
		SetPass(pPass, nPassSize);
		whvector<unsigned char>	vect;
		DePass(pKey, nKeySize, vect);
		try
		{
			ArraySource	asPub((const byte *)vect.getbuf(), nKeySize, true);
			m_pEncryptor	= new RSAES_OAEP_SHA_Encryptor(asPub);
		}
		catch(...)
		{
			return	-1;
		}
		return	0;
	}
	virtual int	Release()
	{
		return	0;
	}
	virtual int	Process(const void *pSrc, int nSrcSize, void *pDst, int nDstSize)
	{
		try
		{
			ArraySink	*pEnc	= new ArraySink((byte *)pDst, nDstSize);
			ArraySource	a((byte *)pSrc, nSrcSize, true, new PK_EncryptorFilter(m_randPool, *m_pEncryptor, pEnc));
			EnPass(pDst, (int)pEnc->TotalPutLength());
			return	(int)pEnc->TotalPutLength();
		}
		catch(...)
		{
			return	-1;
		}
	}
};
class   WHRSA_Decoder	: public WHRSA_Base
{
private:
	RSAES_OAEP_SHA_Decryptor	*m_pDecryptor;
public:
	WHRSA_Decoder()
		: m_pDecryptor(NULL)
	{
	}
	~WHRSA_Decoder()
	{
		if( m_pDecryptor )
		{
			delete	m_pDecryptor;
			m_pDecryptor	= NULL;
		}
	}
	virtual	void	SelfDestroy()
	{
		delete	this;
	}
	virtual int	Init(const void *pPass, int nPassSize, const void *pKey, int nKeySize, const char *cszSeed)
	{
		SetRand(cszSeed);
		SetPass(pPass, nPassSize);
		whvector<unsigned char>	vect;
		DePass(pKey, nKeySize, vect);
		try
		{
			ArraySource	asPri((const byte *)vect.getbuf(), nKeySize, true);
			m_pDecryptor	= new RSAES_OAEP_SHA_Decryptor(asPri);
		}
		catch(...)
		{
			return	-1;
		}
		return	0;
	}
	virtual int	Release()
	{
		return	0;
	}
	virtual int	Process(const void *pSrc, int nSrcSize, void *pDst, int nDstSize)
	{
		try
		{
			whvector<unsigned char>	vect;
			DePass(pSrc, nSrcSize, vect);
			ArraySink	*pDec	= new ArraySink((byte *)pDst, nDstSize);
			ArraySource	a((const byte *)vect.getbuf(), nSrcSize, true, new PK_DecryptorFilter(m_randPool, *m_pDecryptor, pDec));
			return	(int)pDec->TotalPutLength();
		}
		catch(...)
		{
			return	-1;
		}
	}
};

WHRSA *	WHRSA::CreateEncoder()
{
	return	new WHRSA_Encoder;
}
WHRSA *	WHRSA::CreateDecoder()
{
	return	new WHRSA_Decoder;
}

////////////////////////////////////////////////////////////////////
// WHRSACheckSum
////////////////////////////////////////////////////////////////////
class	WHRSACheckSum_Simple	: public WHRSACheckSum
{
protected:
	WHRSA	*m_pEnc, *m_pDec;
	static const char			*m_pcszPass;
	static const unsigned char	m_pcszPri[0x279];
	static const unsigned char	m_pcszPub[0xB0];
public:
	WHRSACheckSum_Simple()
		: m_pEnc(NULL)
		, m_pDec(NULL)
	{
		m_pEnc	= WHRSA::CreateEncoder();
		m_pDec	= WHRSA::CreateDecoder();
		m_pEnc->Init(m_pcszPass, strlen(m_pcszPass), m_pcszPub, sizeof(m_pcszPub));
		m_pDec->Init(m_pcszPass, strlen(m_pcszPass), m_pcszPri, sizeof(m_pcszPri));
	}
	~WHRSACheckSum_Simple()
	{
		WHSafeSelfDestroy(m_pEnc);
		WHSafeSelfDestroy(m_pDec);
	}
	virtual	void	SelfDestroy()
	{
		delete	this;
	}
	virtual int	Make(void *pData, int nDSize, char *pszCheckSum)
	{
		unsigned char	MD5[WHMD5LEN];
		whmd5(pData, nDSize, MD5);
		unsigned char	cs[1024];
		int	rst	= m_pEnc->Process(MD5, sizeof(MD5), cs, sizeof(cs));
		if( rst<0 )
		{
			return	rst;
		}
		wh_hex2str(cs, rst, pszCheckSum, 0, true);
		return	0;
	}
	virtual int	Verify(void *pData, int nDSize, const char *pszCheckSum)
	{
		unsigned char	cs[1024];
		int	rst	= wh_str2hex(pszCheckSum, cs, sizeof(cs));
		if( rst<=0 )
		{
			return	-1;
		}
		unsigned char	MD5[WHMD5LEN];
		rst		= m_pDec->Process(cs, rst, MD5, sizeof(MD5));
		if( rst<0 )
		{
			return	-1000 + rst;
		}
		unsigned char	MD5Data[WHMD5LEN];
		whmd5(pData, nDSize, MD5Data);
		if( memcmp(MD5Data, MD5, sizeof(MD5))!=0 )
		{
			return	-2;
		}
		return	0;
	}
};
const char	*WHRSACheckSum_Simple::m_pcszPass	= "UDon'tSeeMe";

const unsigned char	WHRSACheckSum_Simple::m_pcszPri[]	= 
{
	0x65, 0xA3, 0xCE, 0xD5, 0xF0, 0x85, 0xD6, 0x83, 0xEB, 0xA0, 0xCC, 0xB3, 0x71, 0x56, 0xBE, 0x6E, 
	0x17, 0x45, 0x21, 0x45, 0x0D, 0x68, 0x39, 0xFF, 0x92, 0xA3, 0xB4, 0x42, 0x13, 0x2D, 0x4A, 0x06, 
	0x63, 0x34, 0xF1, 0x1F, 0x71, 0xB2, 0x55, 0xBC, 0x84, 0xF4, 0x48, 0x4B, 0xCD, 0xEB, 0x08, 0x71, 
	0xAF, 0xEF, 0x4D, 0x1B, 0x80, 0xC7, 0xC6, 0xAD, 0x88, 0x8D, 0xE0, 0xCF, 0x3E, 0xBD, 0xB1, 0x44, 
	0xCE, 0x10, 0x5D, 0xB9, 0x32, 0xDF, 0x8B, 0xFB, 0xC0, 0xD1, 0xA6, 0x59, 0x54, 0x3B, 0x75, 0x92, 
	0xAE, 0x43, 0x20, 0x34, 0x3F, 0xFC, 0xEA, 0xAE, 0xB4, 0x05, 0xF3, 0x67, 0xD1, 0x30, 0x28, 0x8B, 
	0x76, 0xF1, 0xB4, 0xBF, 0xEE, 0x24, 0x0A, 0x44, 0x6F, 0x72, 0xDE, 0x31, 0x8F, 0x57, 0xE6, 0xE6, 
	0xEE, 0xD6, 0xC0, 0x06, 0x21, 0x70, 0x62, 0x75, 0xFC, 0x29, 0xED, 0xF6, 0xBA, 0x04, 0x5C, 0x47, 
	0xF0, 0xF5, 0x98, 0xED, 0xEC, 0x59, 0xEE, 0x4C, 0xBE, 0x5F, 0x45, 0x41, 0xC0, 0xCF, 0xA0, 0xD6, 
	0x33, 0xA6, 0x0A, 0xFF, 0xCE, 0x32, 0x46, 0x3B, 0x7E, 0xC1, 0x62, 0xC5, 0x9D, 0x8B, 0xC7, 0x70, 
	0xB8, 0x84, 0x89, 0x08, 0x26, 0x71, 0x34, 0x4A, 0x26, 0x80, 0x74, 0x08, 0x62, 0x5C, 0x02, 0x4D, 
	0x32, 0x5D, 0xF0, 0x85, 0x73, 0x8B, 0xAF, 0xD8, 0xD0, 0x78, 0x13, 0xE1, 0x6C, 0x5B, 0x16, 0x2C, 
	0x02, 0xAB, 0xF7, 0x38, 0x9D, 0x76, 0x9C, 0x6D, 0x96, 0xD9, 0xE1, 0x69, 0xC8, 0xA5, 0xAF, 0x39, 
	0xF5, 0xDF, 0x8E, 0x94, 0xA6, 0x04, 0x0A, 0x2D, 0xAE, 0x67, 0xF9, 0x98, 0xEC, 0x7A, 0x32, 0x50, 
	0x9D, 0x17, 0xA5, 0x7C, 0xC3, 0x6B, 0x11, 0x30, 0x9C, 0x78, 0xC0, 0x04, 0x8F, 0xFD, 0x47, 0x9C, 
	0x68, 0x31, 0xD9, 0xAB, 0x18, 0x3E, 0xFE, 0x7C, 0x4D, 0xE8, 0xBF, 0x39, 0x19, 0x04, 0xBD, 0xC2, 
	0x47, 0x34, 0x98, 0xAC, 0x9B, 0x2A, 0x46, 0x8C, 0x93, 0x0F, 0x1C, 0x60, 0x53, 0x43, 0x59, 0x97, 
	0xE4, 0xE2, 0xD2, 0x88, 0x35, 0x0A, 0xF8, 0x54, 0x49, 0xA8, 0xD9, 0xA0, 0xB4, 0xED, 0xC0, 0xD9, 
	0x6B, 0x53, 0x44, 0x9A, 0x30, 0xDB, 0xA1, 0xE4, 0x69, 0xE1, 0xB4, 0xD9, 0xF6, 0xD1, 0x4C, 0x2D, 
	0xF5, 0x27, 0xAB, 0x21, 0x19, 0xD4, 0x6B, 0x52, 0x57, 0x4B, 0x55, 0xBB, 0x00, 0xAF, 0xAF, 0x74, 
	0x4E, 0x50, 0x1A, 0x13, 0x07, 0xCC, 0x52, 0x4A, 0x36, 0xEA, 0x49, 0x66, 0xF4, 0x7E, 0xF9, 0xDF, 
	0xBA, 0x65, 0x17, 0x9C, 0xAF, 0xD8, 0x96, 0x92, 0x7B, 0xDD, 0x08, 0xBB, 0x2C, 0x24, 0xB6, 0x74, 
	0x57, 0x4D, 0xC0, 0x66, 0x98, 0xE4, 0xA9, 0x04, 0x4A, 0x8A, 0x8F, 0xE9, 0x10, 0x54, 0x38, 0x5E, 
	0x2A, 0x83, 0x0B, 0x3E, 0x37, 0x65, 0xAF, 0x63, 0xA2, 0x9C, 0x77, 0xE7, 0xC7, 0x6B, 0xAF, 0x79, 
	0xA3, 0x5C, 0x6B, 0xC7, 0xB2, 0x70, 0x95, 0x23, 0x63, 0x58, 0xBA, 0xCF, 0x27, 0x92, 0x4B, 0x65, 
	0x57, 0x93, 0x51, 0x75, 0x57, 0xEF, 0xD5, 0x67, 0x23, 0x30, 0x0F, 0x75, 0xBB, 0xAE, 0xCE, 0xBA, 
	0xDB, 0x42, 0x84, 0x60, 0x8A, 0x03, 0x3B, 0xC3, 0x8E, 0x8F, 0xBF, 0xDC, 0x5D, 0xFA, 0x3E, 0x8C, 
	0x83, 0xA6, 0x93, 0xC0, 0x7E, 0x60, 0x21, 0xAD, 0xD6, 0x6D, 0x74, 0x3D, 0x40, 0x98, 0x97, 0x6C, 
	0x6E, 0x39, 0x67, 0x1D, 0x37, 0xFC, 0xA8, 0x4B, 0xE9, 0x78, 0x21, 0x88, 0xF2, 0x6A, 0x64, 0xDA, 
	0xE4, 0xDC, 0x6F, 0x81, 0x23, 0x78, 0x4C, 0xA1, 0xD2, 0xE7, 0xF2, 0x8D, 0x19, 0x81, 0x7B, 0xB0, 
	0xCA, 0x4D, 0xC6, 0xAE, 0xF5, 0x0A, 0xDF, 0x02, 0x8D, 0xBD, 0x7E, 0x1C, 0xDD, 0x10, 0x5D, 0xF5, 
	0x36, 0xE1, 0xB6, 0x00, 0x76, 0x64, 0x01, 0xD5, 0x87, 0x1E, 0x27, 0x00, 0x10, 0xD5, 0x34, 0x17, 
	0x63, 0x31, 0x8D, 0x83, 0xEE, 0x11, 0x79, 0xE6, 0x42, 0x4A, 0x60, 0xCF, 0xCC, 0x55, 0x02, 0x07, 
	0xA6, 0xE9, 0x57, 0x66, 0x12, 0x1E, 0xCA, 0x68, 0xE3, 0xA1, 0x32, 0xE8, 0xBA, 0x51, 0xCE, 0xA1, 
	0x64, 0xD0, 0x7B, 0xD6, 0x98, 0x6E, 0x9C, 0x90, 0x1F, 0xDC, 0x70, 0xB6, 0xD1, 0xD6, 0x5B, 0x50, 
	0xE7, 0x05, 0xF1, 0x35, 0x76, 0x98, 0x9D, 0xCC, 0xE9, 0xCD, 0x92, 0x98, 0x5C, 0x59, 0xCC, 0xB3, 
	0x47, 0xC9, 0x70, 0xC7, 0x5E, 0x4D, 0x58, 0x3D, 0x74, 0xEE, 0xD2, 0x98, 0x9F, 0x85, 0x60, 0x0E, 
	0xAF, 0x33, 0x30, 0x0E, 0x31, 0x20, 0x85, 0x57, 0x8C, 0xEC, 0x14, 0x1C, 0x1F, 0x42, 0xD8, 0x51, 
	0x07, 0x52, 0x35, 0xD9, 0xA3, 0x56, 0xB3, 0xB0, 0xC8, 0x5E, 0x15, 0x67, 0x71, 0xF7, 0x20, 0x78, 
	0xA1, 0x8A, 0xD8, 0xD6, 0x1E, 0x80, 0x81, 0x74, 0xB8, 
};
const unsigned char	WHRSACheckSum_Simple::m_pcszPub[]	= 
{
	0x65, 0xA0, 0x52, 0x0C, 0x26, 0x54, 0x0E, 0x41, 0xA2, 0xA7, 0x44, 0xE6, 0xAF, 0xC1, 0xAE, 0x88, 
	0xF9, 0xAA, 0xCC, 0x28, 0xEE, 0x8B, 0xEE, 0x2B, 0xC3, 0xAF, 0x09, 0xFC, 0xAF, 0x2E, 0xD8, 0x2F, 
	0x17, 0x57, 0xE2, 0xEB, 0x56, 0x13, 0xEB, 0xAF, 0x33, 0x62, 0xDE, 0x88, 0x23, 0x6D, 0x66, 0x36, 
	0x70, 0x6E, 0x3E, 0x53, 0xB3, 0x2E, 0x22, 0xE7, 0x64, 0xB0, 0xC6, 0x41, 0xD1, 0x01, 0x17, 0x76, 
	0x53, 0x42, 0x05, 0xF3, 0xF4, 0xA0, 0x8D, 0x71, 0x70, 0xDF, 0xAD, 0xA7, 0xAC, 0x5F, 0x40, 0x0E, 
	0x2F, 0xFD, 0x10, 0xB9, 0x4D, 0xBD, 0xBB, 0x18, 0xD5, 0x5B, 0x14, 0x24, 0x16, 0xC7, 0xD4, 0xD8, 
	0xE2, 0xE1, 0x4D, 0x92, 0x25, 0xF7, 0x7D, 0x1E, 0x0D, 0x08, 0x5C, 0x8B, 0xB2, 0xE3, 0xC1, 0xDF, 
	0x5C, 0xB2, 0x15, 0x15, 0x64, 0x98, 0xD1, 0xD4, 0x63, 0x56, 0x32, 0x4D, 0x77, 0xA1, 0x0D, 0x92, 
	0x22, 0xD2, 0xD6, 0xD2, 0x63, 0x65, 0x00, 0x4D, 0xCB, 0x45, 0xD4, 0x63, 0x43, 0xA1, 0xD5, 0x98, 
	0xD4, 0x61, 0xF9, 0x3D, 0x7E, 0x55, 0x5B, 0xFD, 0x2B, 0x17, 0x2A, 0xA2, 0x86, 0xEA, 0xCC, 0xA9, 
};

WHRSACheckSum *	WHRSACheckSum::CreateSimple()
{
	return	new WHRSACheckSum_Simple;
}

}		// EOF namespace n_whcmn
