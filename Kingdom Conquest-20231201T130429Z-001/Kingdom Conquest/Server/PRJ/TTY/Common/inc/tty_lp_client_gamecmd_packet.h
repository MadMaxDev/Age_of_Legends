#ifndef __tty_lp_client_gamecmd_packet_H__
#define __tty_lp_client_gamecmd_packet_H__

#include "tty_common_def.h"
#include "tty_common_PlayerData4Web.h"
#include "tty_lp_client_packet.h"
#include "tty_game_def.h"

namespace n_pngs
{
enum
{
	chat_channel_private				= 0,
	chat_channel_alliance				= 1,
	chat_channel_world					= 2,
	//chat_channel_group					= 3,	// 组队聊天频道,目前指多人副本,不算频道
	chat_channel_max					= 3,
};
#pragma pack(1)
struct chat_entry_T 
{
	time_t			nTime;
	unsigned int	nSize;
	char*			pData;
};
#pragma pack()
//////////////////////////////////////////////////////////////////////////
// 游戏指令的二级指令时unsigned int的,可以随意使用
//////////////////////////////////////////////////////////////////////////
// CLIENT->LP
enum
{
	//////////////////////////////////////////////////////////////////////////
	// 聊天相关
	//////////////////////////////////////////////////////////////////////////
	CTS_GAMECMD_CHAT_BEGIN					= 0,
	CTS_GAMECMD_CHAT_PRIVATE				= CTS_GAMECMD_CHAT_BEGIN + 1,		// 私聊
	CTS_GAMECMD_CHAT_ALLIANCE				= CTS_GAMECMD_CHAT_BEGIN + 2,		// 联盟
	CTS_GAMECMD_CHAT_WORLD					= CTS_GAMECMD_CHAT_BEGIN + 3,		// 世界
	CTS_GAMECMD_CHAT_GET_RECENT_CHAT		= CTS_GAMECMD_CHAT_BEGIN + 4,		// 获得最近的聊天记录
	CTS_GAMECMD_CHAT_GROUP					= CTS_GAMECMD_CHAT_BEGIN + 5,		// 组队(多人副本)
	CTS_GAMECMD_WORLD_NOTIFY				= CTS_GAMECMD_CHAT_BEGIN + 10,		// 战报
	CTS_GAMECMD_CHAT_END					= CTS_GAMECMD_CHAT_BEGIN + 20,

	//////////////////////////////////////////////////////////////////////////
	// 查询相关
	//////////////////////////////////////////////////////////////////////////
	CTS_GAMECMD_GET_BEGIN					= CTS_GAMECMD_CHAT_END,
	CTS_GAMECMD_GET_NOTIFICATION			= CTS_GAMECMD_GET_BEGIN + 1,		// 查看通知
	CTS_GAMECMD_GET_TERRAIN					= CTS_GAMECMD_GET_BEGIN	+ 2,		// 查询附近地理信息
	CTS_GAMECMD_GET_PLAYERCARD				= CTS_GAMECMD_GET_BEGIN + 3,		// 根据accountID获取某个玩家的名片
	CTS_GAMECMD_GET_PLAYERCARD_POS			= CTS_GAMECMD_GET_BEGIN	+ 4,		// 根据位置获取PlayerCard
	CTS_GAMECMD_GET_TILE_INFO				= CTS_GAMECMD_GET_BEGIN + 7,		// 获取地图tile信息
	CTS_GAMECMD_GET_BUILDING_LIST			= CTS_GAMECMD_GET_BEGIN + 9,		// 获取建筑列表
	CTS_GAMECMD_GET_BUILDING_TE_LIST		= CTS_GAMECMD_GET_BEGIN + 10,		// 获取建筑时间事件列表
	CTS_GAMECMD_GET_PRODUCTION_EVENT		= CTS_GAMECMD_GET_BEGIN + 11,		// 获取生产事件(就是结果)
	CTS_GAMECMD_GET_PRODUCTION_TE_LIST		= CTS_GAMECMD_GET_BEGIN + 12,		// 获取生产事件事件
	CTS_GAMECMD_GET_TECHNOLOGY				= CTS_GAMECMD_GET_BEGIN + 13,		// 获取科技
	CTS_GAMECMD_GET_RESEARCH_TE				= CTS_GAMECMD_GET_BEGIN + 14,		// 获取科技研究队列
	CTS_GAMECMD_GET_SOLDIER					= CTS_GAMECMD_GET_BEGIN + 15,		// 获取所有军队
	CTS_GAMECMD_GET_ALLIANCE_INFO			= CTS_GAMECMD_GET_BEGIN + 16,		// 获取联盟基本信息
	CTS_GAMECMD_GET_ALLIANCE_MEMBER			= CTS_GAMECMD_GET_BEGIN + 17,		// 获取联盟成员列表
	CTS_GAMECMD_GET_ALLIANCE_BUILDING_TE	= CTS_GAMECMD_GET_BEGIN + 18,		// 获取联盟建筑时间事件列表
	CTS_GAMECMD_GET_ALLIANCE_BUILDING		= CTS_GAMECMD_GET_BEGIN + 19,		// 获取联盟建筑列表
	CTS_GAMECMD_GET_ALLIANCE_JOIN_EVENT		= CTS_GAMECMD_GET_BEGIN + 20,		// 获取联盟申请成员列表
	CTS_GAMECMD_GET_CHAR_ATB				= CTS_GAMECMD_GET_BEGIN + 21,		// 获取角色基本数据
	CTS_GAMECMD_GET_MY_FRIEND_APPLY			= CTS_GAMECMD_GET_BEGIN + 22,		// 获取自己发出的好友申请
	CTS_GAMECMD_GET_OTHERS_FRIEND_APPLY		= CTS_GAMECMD_GET_BEGIN + 23,		// 获取自己收到的好友申请(别人发给自己的)
	CTS_GAMECMD_GET_FRIEND_LIST				= CTS_GAMECMD_GET_BEGIN + 24,		// 获取好友列表
	CTS_GAMECMD_GET_WORLD_AREA_INFO			= CTS_GAMECMD_GET_BEGIN	+ 25,		// 获取世界地图某块的信息(地理信息、城市信息)
	CTS_GAMECMD_GET_WORLD_AREA_INFO1		= CTS_GAMECMD_GET_BEGIN	+ 26,		// 占位
	CTS_GAMECMD_GET_ALLIANCE_MAIL			= CTS_GAMECMD_GET_BEGIN + 27,		// 获取联盟邮件(作废)
	CTS_GAMECMD_GET_ALLIANCE_LOG			= CTS_GAMECMD_GET_BEGIN + 28,		// 获取联盟日志
	CTS_GAMECMD_GET_PRIVATE_LOG				= CTS_GAMECMD_GET_BEGIN + 29,		// 获取私人日志
	CTS_GAMECMD_GET_RELATION_LOG			= CTS_GAMECMD_GET_BEGIN + 30,		// 获取关系日志(附加对方account_id)
	CTS_GAMECMD_GET_TRAINING_TE				= CTS_GAMECMD_GET_BEGIN + 31,		// 获取修炼时间事件
	CTS_GAMECMD_GET_PLAYERCARD_NAME			= CTS_GAMECMD_GET_BEGIN + 32,		// 通过角色名获取名片信息
	CTS_GAMECMD_GET_MY_ALLIANCE_JOIN_EVENT	= CTS_GAMECMD_GET_BEGIN + 33,		// 获取我的联盟申请记录
	CTS_GAMECMD_GET_ALLIANCE_CARD_BY_ID		= CTS_GAMECMD_GET_BEGIN + 34,		// 根据联盟ID获取联盟卡片
	CTS_GAMECMD_GET_ALLIANCE_CARD_BY_RANK	= CTS_GAMECMD_GET_BEGIN + 35,		// 根据联盟排名获取联盟卡片
	CTS_GAMECMD_GET_OTHER_GOLDORE_INFO		= CTS_GAMECMD_GET_BEGIN + 36,		// 获取别人的金矿信息 
	// 占位
	// CTS_GAMECMD_GET_BEGIN + 36~40 CTS_GAMECMD_GET_OTHER_GOLDORE_INFO的返回值
	CTS_GAMECMD_GET_CHRISTMAS_TREE_INFO		= CTS_GAMECMD_GET_BEGIN + 41,		// 获取自己的许愿树状态 
	CTS_GAMECMD_GET_GOLDORE_SMP_INFO_ALL	= CTS_GAMECMD_GET_BEGIN + 42,		// 获取一群人的金矿是否有事件发生
	CTS_GAMECMD_GET_ALLIANCE_TRADE_INFO		= CTS_GAMECMD_GET_BEGIN + 43,		// 获取联盟跑商状态
	CTS_GAMECMD_GET_ENEMY_LIST				= CTS_GAMECMD_GET_BEGIN + 44,		// 获取仇人列表
	CTS_GAMECMD_GET_RANK_LIST				= CTS_GAMECMD_GET_BEGIN + 45,		// 获取排行榜信息
	CTS_GAMECMD_GET_MY_RANK					= CTS_GAMECMD_GET_BEGIN + 46,		// 获取我的排名
	CTS_GAMECMD_GET_IMPORTANT_CHAR_ATB		= CTS_GAMECMD_GET_BEGIN + 47,		// 获取重要的角色属性
	CTS_GAMECMD_GET_PAY_SERIAL				= CTS_GAMECMD_GET_BEGIN + 48,		// 获取交易序列号
	CTS_GAMECMD_GET_WORLD_FAMOUS_CITY_LIST	= CTS_GAMECMD_GET_BEGIN + 49,		// 获取名城列表
	CTS_GAMECMD_GET_SERVER_TIME				= CTS_GAMECMD_GET_BEGIN + 50,		// 获取服务器时间
	CTS_GAMECMD_GET_DONATE_SOLDIER_QUEUE	= CTS_GAMECMD_GET_BEGIN + 51,		// 获取盟友送兵队列
	CTS_GAMECMD_GET_LEFT_DONATE_SOLDIER		= CTS_GAMECMD_GET_BEGIN + 52,		// 获取今日剩余可送兵数量
	CTS_GAMECMD_GET_GOLD_DEAL				= CTS_GAMECMD_GET_BEGIN + 53,		// 获取交易列表
	CTS_GAMECMD_GET_SELF_GOLD_DEAL			= CTS_GAMECMD_GET_BEGIN + 54,		// 获取自己的交易列表
	CTS_GAMECMD_GET_WOLRD_RES				= CTS_GAMECMD_GET_BEGIN + 55,		// 获取世界资源(占位)
	CTS_GAMECMD_GET_WORLD_RES_CARD			= CTS_GAMECMD_GET_BEGIN + 56,		// 获取世界资源详细信息
	CTS_GAMECMD_GET_KICK_CLIENT_ALL			= CTS_GAMECMD_GET_BEGIN + 57,		// 获取踢出用户字串,appid*version
	CTS_GAMECMD_GET_END						= CTS_GAMECMD_GET_BEGIN + 100,

	//////////////////////////////////////////////////////////////////////////
	// 发送邮件(客户端只能发送普通邮件)
	//////////////////////////////////////////////////////////////////////////
	CTS_GAMECMD_ADD_MAIL					= CTS_GAMECMD_GET_END + 1,			// 发送邮件
	CTS_GAMECMD_GET_MAIL					= CTS_GAMECMD_GET_END + 2,			// 获取邮件列表
	CTS_GAMECMD_READ_MAIL					= CTS_GAMECMD_GET_END + 3,			// 阅读邮件
	CTS_GAMECMD_DELETE_MAIL					= CTS_GAMECMD_GET_END + 4,			// 删除邮件
	CTS_GAMECMD_ADD_MESSAGE_N				= CTS_GAMECMD_GET_END + 5,			// 向N个人发送同一封邮件
	CTS_GAMECMD_GET_MAIL_1					= CTS_GAMECMD_GET_END + 6,			// 获取一封邮件
	CTS_GAMECMD_NEW_PRIVATE_MAIL			= CTS_GAMECMD_GET_END + 7,			// 新的邮件到来
	CTS_GAMECMD_ADD_MAIL_WITH_EXT_DATA		= CTS_GAMECMD_GET_END + 8,			// 发送带附件的邮件(这个是用于测试的指令)
	CTS_GAMECMD_READ_MAIL_ALL				= CTS_GAMECMD_GET_END + 9,			// 将所有邮件标记为已读
	CTS_GAMECMD_DELETE_MAIL_ALL				= CTS_GAMECMD_GET_END + 10,			// 删除所有邮件
	CTS_GAMECMD_MAIL_END					= CTS_GAMECMD_GET_END + 10,		//

	//////////////////////////////////////////////////////////////////////////
	// 一些操作
	//////////////////////////////////////////////////////////////////////////
	CTS_GAMECMD_OPERATE_BEGIN				= CTS_GAMECMD_MAIL_END + 0,
	CTS_GAMECMD_OPERATE_BUILD_BUILDING		= CTS_GAMECMD_OPERATE_BEGIN + 1,	// 建造建筑
	CTS_GAMECMD_OPERATE_UPGRADE_BUILDING	= CTS_GAMECMD_OPERATE_BEGIN + 2,	// 升级建筑
	CTS_GAMECMD_OPERATE_PRODUCE_GOLD		= CTS_GAMECMD_OPERATE_BEGIN + 3,	// 生产金子
	CTS_GAMECMD_OPERATE_FETCH_GOLD			= CTS_GAMECMD_OPERATE_BEGIN + 4,	// 采摘金子
	CTS_GAMECMD_OPERATE_ACCE_BUILDING		= CTS_GAMECMD_OPERATE_BEGIN + 5,	// 加速建筑(升级/建造)
	CTS_GAMECMD_OPERATE_ACCE_GOLD_PRODUCE	= CTS_GAMECMD_OPERATE_BEGIN + 6,	// 加速黄金生产
	CTS_GAMECMD_OPERATE_RESEARCH			= CTS_GAMECMD_OPERATE_BEGIN + 7,	// 研究科技
	CTS_GAMECMD_OPERATE_CONSCRIPT_SOLDIER	= CTS_GAMECMD_OPERATE_BEGIN + 8,	// 征召士兵
	CTS_GAMECMD_OPERATE_UPGRADE_SOLDIER		= CTS_GAMECMD_OPERATE_BEGIN + 9,	// 升级士兵
	CTS_GAMECMD_OPERATE_ACCE_RESEARCH		= CTS_GAMECMD_OPERATE_BEGIN + 10,	// 加速科技研究
	CTS_GAMECMD_OPERATE_ACCEPT_ALLI_MEMBER	= CTS_GAMECMD_OPERATE_BEGIN + 11,	// 接受新成员加入联盟
	CTS_GAMECMD_OPERATE_BUILD_ALLI_BUILDING	= CTS_GAMECMD_OPERATE_BEGIN + 12,	// 建造联盟建筑
	CTS_GAMECMD_OPERATE_CANCEL_JOIN_ALLI	= CTS_GAMECMD_OPERATE_BEGIN + 13,	// 取消联盟加入申请
	CTS_GAMECMD_OPERATE_CREATE_ALLI			= CTS_GAMECMD_OPERATE_BEGIN + 14,	// 创建联盟
	CTS_GAMECMD_OPERATE_DISMISS_ALLI		= CTS_GAMECMD_OPERATE_BEGIN + 15,	// 解散联盟
	CTS_GAMECMD_OPERATE_EXIT_ALLI			= CTS_GAMECMD_OPERATE_BEGIN + 16,	// 退出联盟
	CTS_GAMECMD_OPERATE_EXPEL_ALLI_MEMBER	= CTS_GAMECMD_OPERATE_BEGIN + 17,	// 开除联盟成员
	CTS_GAMECMD_OPERATE_JOIN_ALLI			= CTS_GAMECMD_OPERATE_BEGIN + 18,	// 申请加入联盟
	CTS_GAMECMD_OPERATE_SET_ALLI_POSITION	= CTS_GAMECMD_OPERATE_BEGIN + 19,	// 设置成员职位
	CTS_GAMECMD_OPERATE_REFUSE_JOIN_ALLI	= CTS_GAMECMD_OPERATE_BEGIN + 20,	// 拒绝加入联盟申请
	CTS_GAMECMD_OPERATE_ABDICATE_ALLI		= CTS_GAMECMD_OPERATE_BEGIN + 21,	// 禅让盟主
	CTS_GAMECMD_OPERATE_APPROVE_FRIEND		= CTS_GAMECMD_OPERATE_BEGIN + 22,	// 允许成为好友
	CTS_GAMECMD_OPERATE_APPLY_FRIEND		= CTS_GAMECMD_OPERATE_BEGIN + 23,	// 申请成为好友
	CTS_GAMECMD_OPERATE_REFUSE_FRIEND_APPLY	= CTS_GAMECMD_OPERATE_BEGIN + 24,	// 拒绝对方的好友申请
	CTS_GAMECMD_OPERATE_CANCEL_FRIEND_APPLY	= CTS_GAMECMD_OPERATE_BEGIN + 25,	// 取消自己发出的好友申请
	CTS_GAMECMD_OPERATE_DELETE_FRIEND		= CTS_GAMECMD_OPERATE_BEGIN + 26,	// 删除好友
	CTS_GAMECMD_OPERATE_ADD_ALLIANCE_MAIL	= CTS_GAMECMD_OPERATE_BEGIN + 27,	// 添加联盟邮件
	CTS_GAMECMD_OPERATE_BUY_ITEM			= CTS_GAMECMD_OPERATE_BEGIN + 28,	// 通过钻石购买道具
	CTS_GAMECMD_OPERATE_SELL_ITEM			= CTS_GAMECMD_OPERATE_BEGIN + 30,	// 出售道具(出售道具也走这个接口)
	CTS_GAMECMD_OPERATE_FETCH_CHRISTMAS_TREE	= CTS_GAMECMD_OPERATE_BEGIN + 31,	// 收获许愿树
	CTS_GAMECMD_OPERATE_WATERING_CHRISTMAS_TREE	= CTS_GAMECMD_OPERATE_BEGIN + 32,	// 许愿树浇水
	CTS_GAMECMD_OPERATE_STEAL_GOLD			= CTS_GAMECMD_OPERATE_BEGIN + 33,	// 偷窃黄金
	CTS_GAMECMD_OPERATE_ADD_TRAINING		= CTS_GAMECMD_OPERATE_BEGIN + 34,	// 将领修炼
	CTS_GAMECMD_OPERATE_EXIT_TRAINING		= CTS_GAMECMD_OPERATE_BEGIN + 35,	// 退出修炼
	CTS_GAMECMD_OPERATE_CONTRIBUTE_ALLIANCE	= CTS_GAMECMD_OPERATE_BEGIN + 36,	// 联盟捐献
	CTS_GAMECMD_OPERATE_CONVERT_DIAMOND_GOLD= CTS_GAMECMD_OPERATE_BEGIN	+ 37,	// 钻石兑换黄金
	CTS_GAMECMD_OPERATE_JOIN_ALLI_NAME		= CTS_GAMECMD_OPERATE_BEGIN + 38,	// 通过名字申请加入联盟
	CTS_GAMECMD_OPERATE_SET_ALLI_INTRO		= CTS_GAMECMD_OPERATE_BEGIN + 39,	// 设置联盟的简介
	CTS_GAMECMD_OPERATE_DRAW_LOTTERY		= CTS_GAMECMD_OPERATE_BEGIN + 40,	// 抽奖
	CTS_GAMECMD_OPERATE_CHECK_DRAW_LOTTERY	= CTS_GAMECMD_OPERATE_BEGIN + 41,	// 验证抽奖
	CTS_GAMECMD_OPERATE_FETCH_LOTTERY		= CTS_GAMECMD_OPERATE_BEGIN + 42,	// 获取抽奖结果
	CTS_GAMECMD_OPERATE_ALLIANCE_TRADE		= CTS_GAMECMD_OPERATE_BEGIN + 43,	// 联盟跑商
	CTS_GAMECMD_OPERATE_DELETE_ENEMY		= CTS_GAMECMD_OPERATE_BEGIN + 44,	// 删除仇人
	CTS_GAMECMD_OPERATE_WRITE_SIGNATURE		= CTS_GAMECMD_OPERATE_BEGIN + 45,	// 书写个性签名
	CTS_GAMECMD_OPERATE_CHANGE_NAME			= CTS_GAMECMD_OPERATE_BEGIN + 46,	// 修改名字
	CTS_GAMECMD_OPERATE_MOVE_CITY			= CTS_GAMECMD_OPERATE_BEGIN + 47,	// 城市迁移
	CTS_GAMECMD_OPERATE_READ_NOTIFICATION	= CTS_GAMECMD_OPERATE_BEGIN + 48,	// 阅读通知
	CTS_GAMECMD_OPERATE_CHANGE_HERO_NAME	= CTS_GAMECMD_OPERATE_BEGIN + 49,	// 修改英雄名字
	CTS_GAMECMD_OPERATE_ADD_GM_MAIL			= CTS_GAMECMD_OPERATE_BEGIN + 50,	// 给GM发邮件
	CTS_GAMECMD_OPERATE_SET_ALLI_NAME		= CTS_GAMECMD_OPERATE_BEGIN + 51,	// 设置联盟名字
	CTS_GAMECMD_OPERATE_FETCH_MAIL_REWARD	= CTS_GAMECMD_OPERATE_BEGIN + 52,	// 获取邮件中的奖励
	CTS_GAMECMD_OPERATE_UPLOAD_BILL			= CTS_GAMECMD_OPERATE_BEGIN + 53,	// 客户端上传苹果账单
	CTS_GAMECMD_OPERATE_REGISTER_ACCOUNT	= CTS_GAMECMD_OPERATE_BEGIN + 54,	// 注册账号(修改密码)
	CTS_GAMECMD_OPERATE_BIND_DEVICE			= CTS_GAMECMD_OPERATE_BEGIN + 55,	// 绑定设备(通过设备ID登陆)
	CTS_GAMECMD_OPERATE_DISMISS_SOLDIER		= CTS_GAMECMD_OPERATE_BEGIN	+ 56,	// 解散士兵
	CTS_GAMECMD_OPERATE_ALLI_DONATE_SOLDIER	= CTS_GAMECMD_OPERATE_BEGIN	+ 57,	// 对盟友赠送士兵
	CTS_GAMECMD_OPERATE_ALLI_RECALL_SOLDIER	= CTS_GAMECMD_OPERATE_BEGIN + 58,	// 对盟友赠送士兵进行召回
	CTS_GAMECMD_OPERATE_ALLI_ACCE_SOLDIER	= CTS_GAMECMD_OPERATE_BEGIN + 59,	// 对盟友赠送士兵的行军加速
	CTS_GAMECMD_OPERATE_ADD_GOLD_DEAL		= CTS_GAMECMD_OPERATE_BEGIN + 60,	// 添加黄金交易
	CTS_GAMECMD_OPERATE_BUY_GOLD_IN_MARKET	= CTS_GAMECMD_OPERATE_BEGIN + 61,	// 进行黄金家里
	CTS_GAMECMD_OPERATE_CANCEL_GOLD_DEAL	= CTS_GAMECMD_OPERATE_BEGIN + 62,	// 取消黄金交易
	CTS_GAMECMD_OPERATE_SET_VIP_DISPLAY		= CTS_GAMECMD_OPERATE_BEGIN + 63,	// 设置vip显示

	CTS_GAMECMD_OPERATE_TAVERN_REFRESH		= CTS_GAMECMD_OPERATE_BEGIN + 101,	// 酒馆刷新
	CTS_GAMECMD_OPERATE_HIRE_HERO			= CTS_GAMECMD_OPERATE_BEGIN + 102,	// 招募武将
	CTS_GAMECMD_OPERATE_FIRE_HERO			= CTS_GAMECMD_OPERATE_BEGIN + 103,	// 解雇武将
	CTS_GAMECMD_OPERATE_LEVELUP_HERO		= CTS_GAMECMD_OPERATE_BEGIN + 104,	// 武将升级
	CTS_GAMECMD_OPERATE_ADD_GROW			= CTS_GAMECMD_OPERATE_BEGIN + 105,	// 增加成长率
	CTS_GAMECMD_OPERATE_CONFIG_HERO			= CTS_GAMECMD_OPERATE_BEGIN + 106,	// 武将配兵
	CTS_GAMECMD_OPERATE_START_COMBAT		= CTS_GAMECMD_OPERATE_BEGIN + 107,	// 开始战斗
	CTS_GAMECMD_OPERATE_STOP_COMBAT			= CTS_GAMECMD_OPERATE_BEGIN + 108,	// 结束战斗
	CTS_GAMECMD_OPERATE_GET_COMBAT			= CTS_GAMECMD_OPERATE_BEGIN + 109,	// 获取战斗数据
	CTS_GAMECMD_OPERATE_GET_HERO_REFRESH	= CTS_GAMECMD_OPERATE_BEGIN + 110,	// 获取刷新武将
	CTS_GAMECMD_OPERATE_GET_HERO_HIRE		= CTS_GAMECMD_OPERATE_BEGIN + 111,	// 获取雇佣武将
	CTS_GAMECMD_OPERATE_SAVE_COMBAT			= CTS_GAMECMD_OPERATE_BEGIN + 112,	// 战斗结果存盘
	CTS_GAMECMD_OPERATE_LIST_COMBAT			= CTS_GAMECMD_OPERATE_BEGIN + 113,	// 获取所有战斗摘要
	CTS_GAMECMD_OPERATE_CONFIG_CITYDEFENSE	= CTS_GAMECMD_OPERATE_BEGIN + 114,	// 配置城防武将

	CTS_GAMECMD_GET_ITEM					= CTS_GAMECMD_OPERATE_BEGIN + 115,	// 获取道具
	CTS_GAMECMD_ADD_ITEM					= CTS_GAMECMD_OPERATE_BEGIN + 116,	// 添加道具
	CTS_GAMECMD_DEL_ITEM					= CTS_GAMECMD_OPERATE_BEGIN + 117,	// 删除道具
	CTS_GAMECMD_EQUIP_ITEM					= CTS_GAMECMD_OPERATE_BEGIN + 118,	// 装备道具
	CTS_GAMECMD_DISEQUIP_ITEM				= CTS_GAMECMD_OPERATE_BEGIN + 119,	// 卸下装备
	CTS_GAMECMD_MOUNT_ITEM					= CTS_GAMECMD_OPERATE_BEGIN + 120,	// 镶嵌道具
	CTS_GAMECMD_UNMOUNT_ITEM				= CTS_GAMECMD_OPERATE_BEGIN + 121,	// 卸下镶嵌
	CTS_GAMECMD_COMPOS_ITEM					= CTS_GAMECMD_OPERATE_BEGIN + 122,	// 合成道具
	CTS_GAMECMD_DISCOMPOS_ITEM				= CTS_GAMECMD_OPERATE_BEGIN + 123,	// 分解道具

	CTS_GAMECMD_GET_QUEST					= CTS_GAMECMD_OPERATE_BEGIN + 124,	// 获取任务
	CTS_GAMECMD_DONE_QUEST					= CTS_GAMECMD_OPERATE_BEGIN + 125,	// 完成任务

	CTS_GAMECMD_GET_INSTANCESTATUS			= CTS_GAMECMD_OPERATE_BEGIN + 128,	// 获取玩家副本当前状态
	CTS_GAMECMD_GET_INSTANCEDESC			= CTS_GAMECMD_OPERATE_BEGIN + 129,	// 获取副本实例摘要
	CTS_GAMECMD_CREATE_INSTANCE				= CTS_GAMECMD_OPERATE_BEGIN + 130,	// 创建副本
	CTS_GAMECMD_JOIN_INSTANCE				= CTS_GAMECMD_OPERATE_BEGIN + 131,	// 加入副本
	CTS_GAMECMD_QUIT_INSTANCE				= CTS_GAMECMD_OPERATE_BEGIN + 132,	// 退出副本
	CTS_GAMECMD_DESTROY_INSTANCE			= CTS_GAMECMD_OPERATE_BEGIN + 133,	// 销毁副本
	CTS_GAMECMD_GET_INSTANCEDATA			= CTS_GAMECMD_OPERATE_BEGIN + 134,	// 获取副本数据
	CTS_GAMECMD_CONFIG_INSTANCEHERO			= CTS_GAMECMD_OPERATE_BEGIN + 135,	// 配置副本武将
	CTS_GAMECMD_GET_INSTANCELOOT			= CTS_GAMECMD_OPERATE_BEGIN + 136,	// 获取副本掉落
	CTS_GAMECMD_KICK_INSTANCE				= CTS_GAMECMD_OPERATE_BEGIN + 137,	// 踢人
	CTS_GAMECMD_START_INSTANCE				= CTS_GAMECMD_OPERATE_BEGIN + 138,	// 副本出征
	CTS_GAMECMD_PREPARE_INSTANCE			= CTS_GAMECMD_OPERATE_BEGIN + 139,	// 副本就绪

	CTS_GAMECMD_EQUIP_ITEM_ALL				= CTS_GAMECMD_OPERATE_BEGIN + 140,	// 一键换装
	CTS_GAMECMD_MOUNT_ITEM_ALL				= CTS_GAMECMD_OPERATE_BEGIN + 141,	// 一键镶嵌

	CTS_GAMECMD_USE_ITEM					= CTS_GAMECMD_OPERATE_BEGIN + 145,	// 使用道具
	CTS_GAMECMD_AUTO_COMBAT					= CTS_GAMECMD_OPERATE_BEGIN + 146,	// 自动战斗开关

	CTS_GAMECMD_SYNC_CHAR					= CTS_GAMECMD_OPERATE_BEGIN + 147,	// 同步数据，君主
	CTS_GAMECMD_SYNC_HERO					= CTS_GAMECMD_OPERATE_BEGIN + 148,	// 同步数据，武将

	CTS_GAMECMD_AUTO_SUPPLY					= CTS_GAMECMD_OPERATE_BEGIN + 149,	// 自动补给开关
	CTS_GAMECMD_GET_EQUIP					= CTS_GAMECMD_OPERATE_BEGIN + 150,	// 获取已装备的装备
	CTS_GAMECMD_GET_GEM						= CTS_GAMECMD_OPERATE_BEGIN + 151,	// 获取已镶嵌的宝石
	CTS_GAMECMD_MANUAL_SUPPLY				= CTS_GAMECMD_OPERATE_BEGIN + 152,	// 手动补给
	CTS_GAMECMD_REPLACE_EQUIP				= CTS_GAMECMD_OPERATE_BEGIN + 153,	// 替换装备

	CTS_GAMECMD_GET_WORLDGOLDMINE			= CTS_GAMECMD_OPERATE_BEGIN + 155,	// 获取世界金矿
	CTS_GAMECMD_CONFIG_WORLDGOLDMINE_HERO	= CTS_GAMECMD_OPERATE_BEGIN + 156,	// 配置金矿武将
	CTS_GAMECMD_ROB_WORLDGOLDMINE			= CTS_GAMECMD_OPERATE_BEGIN + 157,	// 夺取世界金矿
	CTS_GAMECMD_DROP_WORLDGOLDMINE			= CTS_GAMECMD_OPERATE_BEGIN + 158,	// 放弃世界金矿
	CTS_GAMECMD_MY_WORLDGOLDMINE			= CTS_GAMECMD_OPERATE_BEGIN + 159,	// 我的世界金矿

	CTS_GAMECMD_COMBAT_PROF					= CTS_GAMECMD_OPERATE_BEGIN + 161,	// 获取战力

	CTS_GAMECMD_SUPPLY_INSTANCE				= CTS_GAMECMD_OPERATE_BEGIN + 162,	// 副本补给

	CTS_GAMECMD_GET_CITYDEFENSE				= CTS_GAMECMD_OPERATE_BEGIN + 163,	// 获取城防武将

	CTS_GAMECMD_USE_DRUG					= CTS_GAMECMD_OPERATE_BEGIN + 164,	// 使用草药

	CTS_GAMECMD_ARMY_ACCELERATE				= CTS_GAMECMD_OPERATE_BEGIN + 166,	// 行军加速
	CTS_GAMECMD_ARMY_BACK					= CTS_GAMECMD_OPERATE_BEGIN + 167,	// 召回

	CTS_GAMECMD_WORLDCITY_GET				= CTS_GAMECMD_OPERATE_BEGIN + 170,	// 获得当前世界名城信息

	CTS_GAMECMD_WORLDCITY_RANK_MAN			= CTS_GAMECMD_OPERATE_BEGIN + 172,	// 获得当前奖杯个人排名
	CTS_GAMECMD_WORLDCITY_RANK_ALLIANCE		= CTS_GAMECMD_OPERATE_BEGIN + 173,	// 获得当前奖杯联盟排名

	CTS_GAMECMD_WORLDCITY_GETLOG			= CTS_GAMECMD_OPERATE_BEGIN + 171,	// 获得上次世界名城奖杯战绩个人
	CTS_GAMECMD_WORLDCITY_GETLOG_ALLIANCE	= CTS_GAMECMD_OPERATE_BEGIN + 174,	// 获得上次世界名城奖杯战绩联盟

	CTS_GAMECMD_RECHARGE_TRY				= CTS_GAMECMD_OPERATE_BEGIN + 175,	// 充值尝试，玩家在后续操作中可能会取消

	CTS_GAMECMD_OPERATE_END					= CTS_GAMECMD_OPERATE_BEGIN + 200,

	//////////////////////////////////////////////////////////////////////////
	// 服务器给客户端的一些通知
	//////////////////////////////////////////////////////////////////////////
	CTS_GAMECMD_NOTIFY_BEGIN				= CTS_GAMECMD_OPERATE_END + 0,
	CTS_GAMECMD_POPULATION_ADD				= CTS_GAMECMD_NOTIFY_BEGIN + 1,		// 增加了新的人口
	CTS_GAMECMD_GOLD_CAN_FETCH				= CTS_GAMECMD_NOTIFY_BEGIN + 2,		// 金子已经成熟
	CTS_GAMECMD_BUILDING_TE					= CTS_GAMECMD_NOTIFY_BEGIN + 3,		// 建筑时间事件通知
	CTS_GAMECMD_RESEARCH_TE					= CTS_GAMECMD_NOTIFY_BEGIN + 4,		// 研究时间事件通知
	CTS_GAMECMD_CHAR_IS_ONLINE				= CTS_GAMECMD_NOTIFY_BEGIN + 5,		// 查询某玩家是否在线
	CTS_GAMECMD_CHRISTMAS_TREE_READY_RIPE	= CTS_GAMECMD_NOTIFY_BEGIN + 6,		// 许愿树准备成熟
	CTS_GAMECMD_CHRISTMAS_TREE_RIPE			= CTS_GAMECMD_NOTIFY_BEGIN + 7,		// 许愿树成熟
	CTS_GAMECMD_TRAINING_OVER				= CTS_GAMECMD_NOTIFY_BEGIN + 8,		// 训练结束
	CTS_GAMECMD_NOTIFY_END					= CTS_GAMECMD_NOTIFY_BEGIN + 200,

	//////////////////////////////////////////////////////////////////////////
	// 联盟副本
	//////////////////////////////////////////////////////////////////////////
	CTS_GAMECMD_ALLI_INSTANCE_BEGIN			= CTS_GAMECMD_NOTIFY_END,
	CTS_GAMECMD_ALLI_INSTANCE_CREATE		= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 1,		// 创建副本
	CTS_GAMECMD_ALLI_INSTANCE_JOIN			= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 2,		// 加入副本
	CTS_GAMECMD_ALLI_INSTANCE_EXIT			= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 3,		// 退出副本
	CTS_GAMECMD_ALLI_INSTANCE_KICK			= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 4,		// 踢出副本
	CTS_GAMECMD_ALLI_INSTANCE_DESTROY		= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 5,		// 销毁副本
	CTS_GAMECMD_ALLI_INSTANCE_CONFIG_HERO	= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 6,		// 配置将领
	CTS_GAMECMD_ALLI_INSTANCE_START			= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 7,		// 副本出征
	CTS_GAMECMD_ALLI_INSTANCE_READY			= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 8,		// 准备就绪
	CTS_GAMECMD_ALLI_INSTANCE_GET_LIST		= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 9,		// 获取副本列表
	CTS_GAMECMD_ALLI_INSTANCE_GET_CHAR_DATA	= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 10,		// 获取副本角色详细信息
	CTS_GAMECMD_ALLI_INSTANCE_GET_HERO_DATA	= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 11,		// 获取副本将领详细信息
	CTS_GAMECMD_ALLI_INSTANCE_GET_STATUS	= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 12,		// 自己的副本状态
	CTS_GAMECMD_ALLI_INSTANCE_GET_LOOT		= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 13,		// 获取掉落
	CTS_GAMECMD_ALLI_INSTANCE_SAVE_HERO_DEPLOY	= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 14,	// 保存将领布局
	CTS_GAMECMD_ALLI_INSTANCE_START_COMBAT	= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 15,		// 开始战斗
	CTS_GAMECMD_ALLI_INSTANCE_ACTION_NOTIFY	= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 16,		// 副本玩家行为通知
	CTS_GAMECMD_ALLI_INSTANCE_GET_COMBAT_LOG		= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 17,		// 副本战报
	CTS_GAMECMD_ALLI_INSTANCE_BACK			= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 18,		// 战斗返回
	CTS_GAMECMD_ALLI_INSTANCE_GET_SIMPLE_COMBAT_LOG	= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 19,		// 副本简单战报
	CTS_GAMECMD_ALLI_INSTANCE_STOP_COMBAT	= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 20,		// 停止战斗
	CTS_GAMECMD_ALLI_INSTANCE_SUPPLY		= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 21,		// 补给
	CTS_GAMECMD_ALLI_INSTANCE_GET_DEFENDER_DEPLOY	= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 22,		// 获取军队布局
	CTS_GAMECMD_ALLI_INSTANCE_END			= CTS_GAMECMD_ALLI_INSTANCE_BEGIN + 100,

	//////////////////////////////////////////////////////////////////////////
	// 竞技场
	//////////////////////////////////////////////////////////////////////////
	CTS_GAMECMD_ARENA_BEGIN					= CTS_GAMECMD_ALLI_INSTANCE_END,
	CTS_GAMECMD_ARENA_UPLOAD_DATA			= CTS_GAMECMD_ARENA_BEGIN + 1,				// 上传数据
	CTS_GAMECMD_ARENA_GET_RANK_LIST			= CTS_GAMECMD_ARENA_BEGIN + 2,				// 排行榜
	CTS_GAMECMD_ARENA_GET_STATUS			= CTS_GAMECMD_ARENA_BEGIN + 3,				// 竞技场状态,CD,挑战列表等
	CTS_GAMECMD_ARENA_PAY					= CTS_GAMECMD_ARENA_BEGIN + 4,				// 付费竞技
	CTS_GAMECMD_ARENA_GET_DEPLOY			= CTS_GAMECMD_ARENA_BEGIN + 5,				// 获取竞技场布局
	CTS_GAMECMD_ARENA_END					= CTS_GAMECMD_ARENA_BEGIN + 100,

	//////////////////////////////////////////////////////////////////////////
	// 将领
	//////////////////////////////////////////////////////////////////////////
	CTS_GAMECMD_HERO_BEGIN					= CTS_GAMECMD_ARENA_END,
	CTS_GAMECMD_HERO_SUPPLY					= CTS_GAMECMD_HERO_BEGIN + 1,				// 将领补给
	CTS_GAMECMD_HERO_END					= CTS_GAMECMD_HERO_BEGIN + 200,

	//////////////////////////////////////////////////////////////////////////
	// 位置收藏夹
	//////////////////////////////////////////////////////////////////////////
	CTS_GAMECMD_POSITION_MARK_BEGIN			= CTS_GAMECMD_HERO_END,
	CTS_GAMECMD_POSITION_MARK_ADD_RECORD	= CTS_GAMECMD_POSITION_MARK_BEGIN + 1,
	CTS_GAMECMD_POSITION_MARK_CHG_RECORD	= CTS_GAMECMD_POSITION_MARK_BEGIN + 2,
	CTS_GAMECMD_POSITION_MARK_DEL_RECORD	= CTS_GAMECMD_POSITION_MARK_BEGIN + 3,
	CTS_GAMECMD_POSITION_MARK_GET_RECORD	= CTS_GAMECMD_POSITION_MARK_BEGIN + 4,
	CTS_GAMECMD_POSITION_MARK_END			= CTS_GAMECMD_POSITION_MARK_BEGIN + 10,
};
// LP->CLIENT
enum
{
	//////////////////////////////////////////////////////////////////////////
	// 聊天相关
	//////////////////////////////////////////////////////////////////////////
	STC_GAMECMD_CHAT_BEGIN					= 0,
	STC_GAMECMD_CHAT_PRIVATE				= STC_GAMECMD_CHAT_BEGIN + 1,		// 私聊
	STC_GAMECMD_CHAT_ALLIANCE				= STC_GAMECMD_CHAT_BEGIN + 2,		// 联盟
	STC_GAMECMD_CHAT_WORLD					= STC_GAMECMD_CHAT_BEGIN + 3,		// 世界
	STC_GAMECMD_CHAT_GROUP					= STC_GAMECMD_CHAT_BEGIN + 5,		// 组队(多人副本)
	STC_GAMECMD_WORLD_NOTIFY				= STC_GAMECMD_CHAT_BEGIN + 10,		// 战报
	STC_GAMECMD_CHAT_END					= STC_GAMECMD_CHAT_BEGIN + 20,

	//////////////////////////////////////////////////////////////////////////
	// 查询相关
	//////////////////////////////////////////////////////////////////////////
	STC_GAMECMD_GET_BEGIN					= STC_GAMECMD_CHAT_END,
	STC_GAMECMD_GET_NOTIFICATION			= STC_GAMECMD_GET_BEGIN + 1,		// 查看通知
	STC_GAMECMD_GET_TERRAIN					= STC_GAMECMD_GET_BEGIN + 2,
	STC_GAMECMD_GET_PLAYERCARD				= STC_GAMECMD_GET_BEGIN + 3,
	STC_GAMECMD_GET_TILE_INFO				= STC_GAMECMD_GET_BEGIN + 7,		// 获取tile信息
	STC_GAMECMD_GET_TILE_NONE				= STC_GAMECMD_GET_BEGIN + 8,		// 获取tile信息失败
	STC_GAMECMD_GET_BUILDING_LIST			= STC_GAMECMD_GET_BEGIN + 9,		// 获取建筑列表
	STC_GAMECMD_GET_BUILDING_TE_LIST		= STC_GAMECMD_GET_BEGIN + 10,		// 获取建筑时间事件列表
	STC_GAMECMD_GET_PRODUCTION_EVENT		= STC_GAMECMD_GET_BEGIN + 11,		// 获取生产事件
	STC_GAMECMD_GET_PRODUCTION_TE_LIST		= STC_GAMECMD_GET_BEGIN + 12,		// 获取生产时间事件
	STC_GAMECMD_GET_TECHNOLOGY				= STC_GAMECMD_GET_BEGIN + 13,		// 获取科技
	STC_GAMECMD_GET_RESEARCH_TE				= STC_GAMECMD_GET_BEGIN + 14,		// 获取科技研究队列
	STC_GAMECMD_GET_SOLDIER					= STC_GAMECMD_GET_BEGIN + 15,		// 获取所有军队
	STC_GAMECMD_GET_ALLIANCE_INFO			= STC_GAMECMD_GET_BEGIN + 16,		// 获取联盟基本信息
	STC_GAMECMD_GET_ALLIANCE_MEMBER			= STC_GAMECMD_GET_BEGIN + 17,		// 获取联盟成员列表
	STC_GAMECMD_GET_ALLIANCE_BUILDING_TE	= STC_GAMECMD_GET_BEGIN + 18,		// 获取联盟建筑时间事件列表
	STC_GAMECMD_GET_ALLIANCE_BUILDING		= STC_GAMECMD_GET_BEGIN + 19,		// 获取联盟建筑列表
	STC_GAMECMD_GET_ALLIANCE_JOIN_EVENT		= STC_GAMECMD_GET_BEGIN + 20,		// 获取联盟申请成员列表
	STC_GAMECMD_GET_CHAR_ATB				= STC_GAMECMD_GET_BEGIN + 21,		// 获取角色基本数据
	STC_GAMECMD_GET_MY_FRIEND_APPLY			= STC_GAMECMD_GET_BEGIN + 22,		// 获取自己发出的好友申请
	STC_GAMECMD_GET_OTHERS_FRIEND_APPLY		= STC_GAMECMD_GET_BEGIN + 23,		// 获取自己收到的好友申请(别人发给自己的)
	STC_GAMECMD_GET_FRIEND_LIST				= STC_GAMECMD_GET_BEGIN + 24,		// 获取好友列表
	STC_GAMECMD_GET_WORLD_AREA_INFO_TERRAIN	= STC_GAMECMD_GET_BEGIN	+ 25,		// 获取世界地图某块的信息(地理信息)
	STC_GAMECMD_GET_WORLD_AREA_INFO_CITY	= STC_GAMECMD_GET_BEGIN	+ 26,		// 获取世界地图某块的信息(城市信息)
	STC_GAMECMD_GET_ALLIANCE_MAIL			= STC_GAMECMD_GET_BEGIN + 27,		// 获取联盟邮件
	STC_GAMECMD_GET_ALLIANCE_LOG			= STC_GAMECMD_GET_BEGIN + 28,		// 获取联盟日志
	STC_GAMECMD_GET_PRIVATE_LOG				= STC_GAMECMD_GET_BEGIN + 29,		// 获取私人日志
	STC_GAMECMD_GET_RELATION_LOG			= STC_GAMECMD_GET_BEGIN + 30,		// 获取关系日志,附加account_id
	STC_GAMECMD_GET_TRAINING_TE				= STC_GAMECMD_GET_BEGIN + 31,		// 训练结束
	STC_GAMECMD_GET_PLAYERCARD_NAME			= STC_GAMECMD_GET_BEGIN + 32,		// 通过角色名获取名片信息
	STC_GAMECMD_GET_MY_ALLIANCE_JOIN_EVENT	= STC_GAMECMD_GET_BEGIN + 33,		// 获取我的联盟申请记录
	STC_GAMECMD_GET_ALLIANCE_CARD_BY_ID		= STC_GAMECMD_GET_BEGIN + 34,		// 根据联盟ID获取联盟卡片
	STC_GAMECMD_GET_ALLIANCE_CARD_BY_RANK	= STC_GAMECMD_GET_BEGIN + 35,		// 根据联盟排名获取联盟卡片
	STC_GAMECMD_GET_OTHER_GOLDORE_INFO		= STC_GAMECMD_GET_BEGIN + 36,		// 获取别人的金矿信息 
	/*
	STC_GAMECMD_GET_OTHER_GOLDORE_POSITION	= STC_GAMECMD_GET_BEGIN + 36,		// 获取别人的金矿信息CTS_GAMECMD_GET_OTHER_GOLDORE_INFO 
	STC_GAMECMD_GET_OTHER_GOLDORE_PRODUCTION_EVENT	= STC_GAMECMD_GET_BEGIN + 37,	// 获取金矿成熟事件CTS_GAMECMD_GET_OTHER_GOLDORE_INFO 
	STC_GAMECMD_GET_OTHER_GOLDORE_PRODUCTION_TE		= STC_GAMECMD_GET_BEGIN + 38,	// 获取金矿时间事件CTS_GAMECMD_GET_OTHER_GOLDORE_INFO 
	STC_GAMECMD_GET_OTHER_GOLDORE_FETCH_INFO		= STC_GAMECMD_GET_BEGIN + 39,	// 获取金矿的摘取信息CTS_GAMECMD_GET_OTHER_GOLDORE_INFO 
	STC_GAMECMD_GET_OTHER_CHRISTMAS_TREE_INFO		= STC_GAMECMD_GET_BEGIN + 40,	// 获取圣诞树信息CTS_GAMECMD_GET_OTHER_GOLDORE_INFO 
	*/
	STC_GAMECMD_GET_CHRISTMAS_TREE_INFO		= STC_GAMECMD_GET_BEGIN + 41,		// 获取自己的许愿树状态 
	STC_GAMECMD_GET_GOLDORE_SMP_INFO_ALL	= STC_GAMECMD_GET_BEGIN + 42,		// 获取一群人的金矿是否有事件发生
	STC_GAMECMD_GET_ALLIANCE_TRADE_INFO		= STC_GAMECMD_GET_BEGIN + 43,		// 获取联盟跑商状态
	STC_GAMECMD_GET_ENEMY_LIST				= STC_GAMECMD_GET_BEGIN + 44,		// 获取仇人列表
	STC_GAMECMD_GET_RANK_LIST				= STC_GAMECMD_GET_BEGIN + 45,		// 获取排行榜信息
	STC_GAMECMD_GET_MY_RANK					= STC_GAMECMD_GET_BEGIN + 46,		// 获取我的排名
	STC_GAMECMD_GET_IMPORTANT_CHAR_ATB		= STC_GAMECMD_GET_BEGIN + 47,		// 获取重要的角色属性
	STC_GAMECMD_GET_PAY_SERIAL				= STC_GAMECMD_GET_BEGIN + 48,		// 获取交易序列号
	STC_GAMECMD_GET_WORLD_FAMOUS_CITY_LIST	= STC_GAMECMD_GET_BEGIN + 49,		// 获取名城列表
	STC_GAMECMD_GET_SERVER_TIME				= STC_GAMECMD_GET_BEGIN + 50,		// 获取服务器时间
	STC_GAMECMD_GET_DONATE_SOLDIER_QUEUE	= STC_GAMECMD_GET_BEGIN + 51,		// 获取盟友送兵队列
	STC_GAMECMD_GET_LEFT_DONATE_SOLDIER		= STC_GAMECMD_GET_BEGIN + 52,		// 获取今日剩余可送兵数量
	STC_GAMECMD_GET_GOLD_DEAL				= STC_GAMECMD_GET_BEGIN + 53,		// 获取交易列表
	STC_GAMECMD_GET_SELF_GOLD_DEAL			= STC_GAMECMD_GET_BEGIN + 54,		// 获取自己的交易列表
	STC_GAMECMD_GET_WORLD_RES				= STC_GAMECMD_GET_BEGIN + 55,		// 获取世界资源
	STC_GAMECMD_GET_WORLD_RES_CARD			= STC_GAMECMD_GET_BEGIN + 56,		// 获取世界资源详细信息
	STC_GAMECMD_GET_KICK_CLIENT_ALL			= STC_GAMECMD_GET_BEGIN + 57,		// 获取踢出用户字串,appid*version
	STC_GAMECMD_GET_END						= STC_GAMECMD_GET_BEGIN	+ 100,

	//////////////////////////////////////////////////////////////////////////
	// 发送邮件的返回值
	//////////////////////////////////////////////////////////////////////////
	STC_GAMECMD_ADD_MAIL					= STC_GAMECMD_GET_END + 1,			// 发送邮件
	STC_GAMECMD_GET_MAIL					= STC_GAMECMD_GET_END + 2,			// 获取邮件列表
	STC_GAMECMD_READ_MAIL					= STC_GAMECMD_GET_END + 3,			// 阅读邮件
	STC_GAMECMD_DELETE_MAIL					= STC_GAMECMD_GET_END + 4,			// 删除邮件
	STC_GAMECMD_ADD_MESSAGE_N				= STC_GAMECMD_GET_END + 5,			// 向N个人发送同一封邮件
	STC_GAMECMD_GET_MAIL_1					= STC_GAMECMD_GET_END + 6,			// 获取一封邮件
	STC_GAMECMD_NEW_PRIVATE_MAIL			= STC_GAMECMD_GET_END + 7,			// 新的邮件到来
	STC_GAMECMD_ADD_MAIL_WITH_EXT_DATA		= STC_GAMECMD_GET_END + 8,			// 发送带附件的邮件(这个是用于测试的指令)
	STC_GAMECMD_READ_MAIL_ALL				= STC_GAMECMD_GET_END + 9,			// 将所有邮件标记为已读
	STC_GAMECMD_DELETE_MAIL_ALL				= STC_GAMECMD_GET_END + 10,			// 删除所有邮件
	STC_GAMECMD_MAIL_END					= STC_GAMECMD_GET_END + 10,

	//////////////////////////////////////////////////////////////////////////
	// 一些操作
	//////////////////////////////////////////////////////////////////////////
	STC_GAMECMD_OPERATE_BEGIN				= STC_GAMECMD_MAIL_END + 0,
	STC_GAMECMD_OPERATE_BUILD_BUILDING		= STC_GAMECMD_OPERATE_BEGIN + 1,	// 建造建筑
	STC_GAMECMD_OPERATE_UPGRADE_BUILDING	= STC_GAMECMD_OPERATE_BEGIN + 2,	// 升级建筑
	STC_GAMECMD_OPERATE_PRODUCE_GOLD		= STC_GAMECMD_OPERATE_BEGIN + 3,	// 生产金子
	STC_GAMECMD_OPERATE_FETCH_GOLD			= STC_GAMECMD_OPERATE_BEGIN + 4,	// 采摘金子
	STC_GAMECMD_OPERATE_ACCE_BUILDING		= STC_GAMECMD_OPERATE_BEGIN + 5,	// 加速建筑(升级/建造)
	STC_GAMECMD_OPERATE_ACCE_GOLD_PRODUCE	= STC_GAMECMD_OPERATE_BEGIN + 6,	// 加速黄金生产
	STC_GAMECMD_OPERATE_RESEARCH			= STC_GAMECMD_OPERATE_BEGIN + 7,	// 研究科技
	STC_GAMECMD_OPERATE_CONSCRIPT_SOLDIER	= STC_GAMECMD_OPERATE_BEGIN + 8,	// 征召士兵
	STC_GAMECMD_OPERATE_UPGRADE_SOLDIER		= STC_GAMECMD_OPERATE_BEGIN + 9,	// 升级士兵
	STC_GAMECMD_OPERATE_ACCE_RESEARCH		= STC_GAMECMD_OPERATE_BEGIN + 10,	// 加速科技研究
	STC_GAMECMD_OPERATE_ACCEPT_ALLI_MEMBER	= STC_GAMECMD_OPERATE_BEGIN + 11,	// 接受新成员加入联盟
	STC_GAMECMD_OPERATE_BUILD_ALLI_BUILDING	= STC_GAMECMD_OPERATE_BEGIN + 12,	// 建造联盟建筑
	STC_GAMECMD_OPERATE_CANCEL_JOIN_ALLI	= STC_GAMECMD_OPERATE_BEGIN + 13,	// 取消联盟加入申请
	STC_GAMECMD_OPERATE_CREATE_ALLI			= STC_GAMECMD_OPERATE_BEGIN + 14,	// 创建联盟
	STC_GAMECMD_OPERATE_DISMISS_ALLI		= STC_GAMECMD_OPERATE_BEGIN + 15,	// 解散联盟
	STC_GAMECMD_OPERATE_EXIT_ALLI			= STC_GAMECMD_OPERATE_BEGIN + 16,	// 退出联盟
	STC_GAMECMD_OPERATE_EXPEL_ALLI_MEMBER	= STC_GAMECMD_OPERATE_BEGIN + 17,	// 开除联盟成员
	STC_GAMECMD_OPERATE_JOIN_ALLI			= STC_GAMECMD_OPERATE_BEGIN + 18,	// 申请加入联盟
	STC_GAMECMD_OPERATE_SET_ALLI_POSITION	= STC_GAMECMD_OPERATE_BEGIN + 19,	// 设置成员职位
	STC_GAMECMD_OPERATE_REFUSE_JOIN_ALLI	= STC_GAMECMD_OPERATE_BEGIN + 20,	// 拒绝加入联盟申请
	STC_GAMECMD_OPERATE_ABDICATE_ALLI		= STC_GAMECMD_OPERATE_BEGIN + 21,	// 禅让盟主
	STC_GAMECMD_OPERATE_APPROVE_FRIEND		= STC_GAMECMD_OPERATE_BEGIN + 22,	// 允许成为好友
	STC_GAMECMD_OPERATE_APPLY_FRIEND		= STC_GAMECMD_OPERATE_BEGIN + 23,	// 申请成为好友
	STC_GAMECMD_OPERATE_REFUSE_FRIEND_APPLY	= STC_GAMECMD_OPERATE_BEGIN + 24,	// 拒绝对方的好友申请
	STC_GAMECMD_OPERATE_CANCEL_FRIEND_APPLY	= STC_GAMECMD_OPERATE_BEGIN + 25,	// 取消自己发出的好友申请
	STC_GAMECMD_OPERATE_DELETE_FRIEND		= STC_GAMECMD_OPERATE_BEGIN + 26,	// 删除好友
	STC_GAMECMD_OPERATE_ADD_ALLIANCE_MAIL	= STC_GAMECMD_OPERATE_BEGIN + 27,	// 添加联盟邮件
	STC_GAMECMD_OPERATE_BUY_ITEM			= STC_GAMECMD_OPERATE_BEGIN + 28,	// 通过钻石购买道具
	STC_GAMECMD_OPERATE_SELL_ITEM			= STC_GAMECMD_OPERATE_BEGIN + 30,		// 出售道具(出售道具也走这个接口)
	STC_GAMECMD_OPERATE_FETCH_CHRISTMAS_TREE	= STC_GAMECMD_OPERATE_BEGIN + 31,	// 收获许愿树
	STC_GAMECMD_OPERATE_WATERING_CHRISTMAS_TREE	= STC_GAMECMD_OPERATE_BEGIN + 32,	// 许愿树浇水
	STC_GAMECMD_OPERATE_STEAL_GOLD			= STC_GAMECMD_OPERATE_BEGIN + 33,	// 偷窃黄金
	STC_GAMECMD_OPERATE_ADD_TRAINING		= STC_GAMECMD_OPERATE_BEGIN + 34,	// 将领训练
	STC_GAMECMD_OPERATE_EXIT_TRAINING		= STC_GAMECMD_OPERATE_BEGIN + 35,	// 退出训练
	STC_GAMECMD_OPERATE_CONTRIBUTE_ALLIANCE	= STC_GAMECMD_OPERATE_BEGIN + 36,	// 联盟捐献
	STC_GAMECMD_OPERATE_CONVERT_DIAMOND_GOLD= STC_GAMECMD_OPERATE_BEGIN	+ 37,	// 钻石兑换黄金
	STC_GAMECMD_OPERATE_JOIN_ALLI_NAME		= STC_GAMECMD_OPERATE_BEGIN + 38,	// 通过名字申请加入联盟
	STC_GAMECMD_OPERATE_SET_ALLI_INTRO		= STC_GAMECMD_OPERATE_BEGIN + 39,	// 设置联盟的简介
	STC_GAMECMD_OPERATE_DRAW_LOTTERY		= STC_GAMECMD_OPERATE_BEGIN + 40,	// 抽奖
	STC_GAMECMD_OPERATE_CHECK_DRAW_LOTTERY	= STC_GAMECMD_OPERATE_BEGIN + 41,	// 验证抽奖
	STC_GAMECMD_OPERATE_FETCH_LOTTERY		= STC_GAMECMD_OPERATE_BEGIN + 42,	// 获取抽奖结果
	STC_GAMECMD_OPERATE_ALLIANCE_TRADE		= STC_GAMECMD_OPERATE_BEGIN + 43,	// 联盟跑商
	STC_GAMECMD_OPERATE_DELETE_ENEMY		= STC_GAMECMD_OPERATE_BEGIN + 44,	// 删除仇人
	STC_GAMECMD_OPERATE_WRITE_SIGNATURE		= STC_GAMECMD_OPERATE_BEGIN + 45,	// 书写个性签名
	STC_GAMECMD_OPERATE_CHANGE_NAME			= STC_GAMECMD_OPERATE_BEGIN + 46,	// 修改名字
	STC_GAMECMD_OPERATE_MOVE_CITY			= STC_GAMECMD_OPERATE_BEGIN + 47,	// 城市迁移
	STC_GAMECMD_OPERATE_READ_NOTIFICATION	= STC_GAMECMD_OPERATE_BEGIN + 48,	// 阅读通知
	STC_GAMECMD_OPERATE_CHANGE_HERO_NAME	= STC_GAMECMD_OPERATE_BEGIN + 49,	// 修改英雄名字
	STC_GAMECMD_OPERATE_ADD_GM_MAIL			= STC_GAMECMD_OPERATE_BEGIN + 50,	// 给GM发邮件
	STC_GAMECMD_OPERATE_SET_ALLI_NAME		= STC_GAMECMD_OPERATE_BEGIN + 51,	// 设置联盟名字
	STC_GAMECMD_OPERATE_FETCH_MAIL_REWARD	= STC_GAMECMD_OPERATE_BEGIN + 52,	// 获取邮件中的奖励
	STC_GAMECMD_OPERATE_UPLOAD_BILL			= STC_GAMECMD_OPERATE_BEGIN + 53,	// 客户端上传苹果账单
	STC_GAMECMD_OPERATE_REGISTER_ACCOUNT	= STC_GAMECMD_OPERATE_BEGIN + 54,	// 注册账号(修改密码)
	STC_GAMECMD_OPERATE_BIND_DEVICE			= STC_GAMECMD_OPERATE_BEGIN + 55,	// 绑定设备(通过设备ID登陆)
	STC_GAMECMD_OPERATE_DISMISS_SOLDIER		= STC_GAMECMD_OPERATE_BEGIN	+ 56,	// 解散士兵
	STC_GAMECMD_OPERATE_ALLI_DONATE_SOLDIER	= STC_GAMECMD_OPERATE_BEGIN	+ 57,	// 对盟友赠送士兵
	STC_GAMECMD_OPERATE_ALLI_RECALL_SOLDIER	= STC_GAMECMD_OPERATE_BEGIN + 58,	// 对盟友赠送士兵进行召回
	STC_GAMECMD_OPERATE_ALLI_ACCE_SOLDIER	= STC_GAMECMD_OPERATE_BEGIN + 59,	// 对盟友赠送士兵的行军加速
	STC_GAMECMD_OPERATE_ADD_GOLD_DEAL		= STC_GAMECMD_OPERATE_BEGIN + 60,	// 添加黄金交易
	STC_GAMECMD_OPERATE_BUY_GOLD_IN_MARKET	= STC_GAMECMD_OPERATE_BEGIN + 61,	// 进行黄金家里
	STC_GAMECMD_OPERATE_CANCEL_GOLD_DEAL	= STC_GAMECMD_OPERATE_BEGIN + 62,	// 取消黄金交易
	STC_GAMECMD_OPERATE_SET_VIP_DISPLAY		= STC_GAMECMD_OPERATE_BEGIN + 63,	// 设置vip显示

	STC_GAMECMD_OPERATE_TAVERN_REFRESH		= STC_GAMECMD_OPERATE_BEGIN + 101,	// 酒馆刷新
	STC_GAMECMD_OPERATE_HIRE_HERO			= STC_GAMECMD_OPERATE_BEGIN + 102,	// 招募武将
	STC_GAMECMD_OPERATE_FIRE_HERO			= STC_GAMECMD_OPERATE_BEGIN + 103,	// 解雇武将
	STC_GAMECMD_OPERATE_LEVELUP_HERO		= STC_GAMECMD_OPERATE_BEGIN + 104,	// 武将升级
	STC_GAMECMD_OPERATE_ADD_GROW			= STC_GAMECMD_OPERATE_BEGIN + 105,	// 增加成长率
	STC_GAMECMD_OPERATE_CONFIG_HERO			= STC_GAMECMD_OPERATE_BEGIN + 106,	// 武将配兵
	STC_GAMECMD_OPERATE_START_COMBAT		= STC_GAMECMD_OPERATE_BEGIN + 107,	// 开始战斗
	STC_GAMECMD_OPERATE_STOP_COMBAT			= STC_GAMECMD_OPERATE_BEGIN + 108,	// 结束战斗
	STC_GAMECMD_OPERATE_GET_COMBAT			= STC_GAMECMD_OPERATE_BEGIN + 109,	// 获取战斗数据
	STC_GAMECMD_OPERATE_GET_HERO_REFRESH	= STC_GAMECMD_OPERATE_BEGIN + 110,	// 获取刷新武将信息
	STC_GAMECMD_OPERATE_GET_HERO_HIRE		= STC_GAMECMD_OPERATE_BEGIN + 111,	// 获取雇佣武将信息
	STC_GAMECMD_OPERATE_LIST_COMBAT			= STC_GAMECMD_OPERATE_BEGIN + 113,	// 获取所有战斗摘要
	STC_GAMECMD_OPERATE_CONFIG_CITYDEFENSE	= STC_GAMECMD_OPERATE_BEGIN + 114,	// 配置城防武将

	STC_GAMECMD_GET_ITEM					= STC_GAMECMD_OPERATE_BEGIN + 115,	// 获取道具
	STC_GAMECMD_ADD_ITEM					= STC_GAMECMD_OPERATE_BEGIN + 116,	// 添加道具
	STC_GAMECMD_DEL_ITEM					= STC_GAMECMD_OPERATE_BEGIN + 117,	// 删除道具
	STC_GAMECMD_EQUIP_ITEM					= STC_GAMECMD_OPERATE_BEGIN + 118,	// 装备道具
	STC_GAMECMD_DISEQUIP_ITEM				= STC_GAMECMD_OPERATE_BEGIN + 119,	// 卸下装备
	STC_GAMECMD_MOUNT_ITEM					= STC_GAMECMD_OPERATE_BEGIN + 120,	// 镶嵌道具
	STC_GAMECMD_UNMOUNT_ITEM				= STC_GAMECMD_OPERATE_BEGIN + 121,	// 卸下镶嵌
	STC_GAMECMD_COMPOS_ITEM					= STC_GAMECMD_OPERATE_BEGIN + 122,	// 合成道具
	STC_GAMECMD_DISCOMPOS_ITEM				= STC_GAMECMD_OPERATE_BEGIN + 123,	// 分解道具

	STC_GAMECMD_GET_QUEST					= STC_GAMECMD_OPERATE_BEGIN + 124,	// 获取任务
	STC_GAMECMD_DONE_QUEST					= STC_GAMECMD_OPERATE_BEGIN + 125,	// 完成任务

	STC_GAMECMD_GET_INSTANCESTATUS			= STC_GAMECMD_OPERATE_BEGIN + 128,	// 获取玩家副本当前状态
	STC_GAMECMD_GET_INSTANCEDESC			= STC_GAMECMD_OPERATE_BEGIN + 129,	// 获取副本实例信息
	STC_GAMECMD_CREATE_INSTANCE				= STC_GAMECMD_OPERATE_BEGIN + 130,	// 创建副本
	STC_GAMECMD_JOIN_INSTANCE				= STC_GAMECMD_OPERATE_BEGIN + 131,	// 加入副本
	STC_GAMECMD_QUIT_INSTANCE				= STC_GAMECMD_OPERATE_BEGIN + 132,	// 退出副本
	STC_GAMECMD_DESTROY_INSTANCE			= STC_GAMECMD_OPERATE_BEGIN + 133,	// 销毁副本
	STC_GAMECMD_GET_INSTANCEDATA			= STC_GAMECMD_OPERATE_BEGIN + 134,	// 获取副本数据
	STC_GAMECMD_CONFIG_INSTANCEHERO			= STC_GAMECMD_OPERATE_BEGIN + 135,	// 配置副本武将
	STC_GAMECMD_GET_INSTANCELOOT			= STC_GAMECMD_OPERATE_BEGIN + 136,	// 获取副本掉落
	STC_GAMECMD_KICK_INSTANCE				= STC_GAMECMD_OPERATE_BEGIN + 137,	// 踢人
	STC_GAMECMD_START_INSTANCE				= STC_GAMECMD_OPERATE_BEGIN + 138,	// 副本出征
	STC_GAMECMD_PREPARE_INSTANCE			= STC_GAMECMD_OPERATE_BEGIN + 139,	// 副本就绪

	STC_GAMECMD_EQUIP_ITEM_ALL				= STC_GAMECMD_OPERATE_BEGIN + 140,	// 一键换装
	STC_GAMECMD_MOUNT_ITEM_ALL				= STC_GAMECMD_OPERATE_BEGIN + 141,	// 一键镶嵌

	STC_GAMECMD_USE_ITEM					= STC_GAMECMD_OPERATE_BEGIN + 145,	// 使用道具
	STC_GAMECMD_AUTO_COMBAT					= STC_GAMECMD_OPERATE_BEGIN + 146,	// 自动战斗开关

	STC_GAMECMD_SYNC_CHAR					= STC_GAMECMD_OPERATE_BEGIN + 147,	// 同步数据，君主
	STC_GAMECMD_SYNC_HERO					= STC_GAMECMD_OPERATE_BEGIN + 148,	// 同步数据，武将

	STC_GAMECMD_AUTO_SUPPLY					= STC_GAMECMD_OPERATE_BEGIN + 149,	// 自动补给开关
	STC_GAMECMD_GET_EQUIP					= STC_GAMECMD_OPERATE_BEGIN + 150,	// 获取已装备的装备
	STC_GAMECMD_GET_GEM						= STC_GAMECMD_OPERATE_BEGIN + 151,	// 获取已镶嵌的宝石
	STC_GAMECMD_MANUAL_SUPPLY				= STC_GAMECMD_OPERATE_BEGIN + 152,	// 手动补给
	STC_GAMECMD_REPLACE_EQUIP				= STC_GAMECMD_OPERATE_BEGIN + 153,	// 替换装备

	STC_GAMECMD_GET_WORLDGOLDMINE			= STC_GAMECMD_OPERATE_BEGIN + 155,	// 获取世界金矿
	STC_GAMECMD_CONFIG_WORLDGOLDMINE_HERO	= STC_GAMECMD_OPERATE_BEGIN + 156,	// 配置金矿武将
	STC_GAMECMD_ROB_WORLDGOLDMINE			= STC_GAMECMD_OPERATE_BEGIN + 157,	// 夺取世界金矿
	STC_GAMECMD_DROP_WORLDGOLDMINE			= STC_GAMECMD_OPERATE_BEGIN + 158,	// 放弃世界金矿
	STC_GAMECMD_GAIN_WORLDGOLDMINE			= STC_GAMECMD_OPERATE_BEGIN + 159,	// 收获世界金矿
	STC_GAMECMD_MY_WORLDGOLDMINE			= STC_GAMECMD_OPERATE_BEGIN + 160,	// 我的世界金矿

	STC_GAMECMD_COMBAT_PROF					= STC_GAMECMD_OPERATE_BEGIN + 161,	// 获取战力
	STC_GAMECMD_SUPPLY_INSTANCE				= STC_GAMECMD_OPERATE_BEGIN + 162,	// 副本补给
	STC_GAMECMD_GET_CITYDEFENSE				= STC_GAMECMD_OPERATE_BEGIN + 163,	// 获取城防武将
	STC_GAMECMD_USE_DRUG					= STC_GAMECMD_OPERATE_BEGIN + 164,	// 使用草药
	STC_GAMECMD_GET_INSTANCELOOT_ADDITEM	= STC_GAMECMD_OPERATE_BEGIN + 170,	// 增加道具，副本掉落
	STC_GAMECMD_SUPPLY_DRUG					= STC_GAMECMD_OPERATE_BEGIN + 171,	// 手动补给消耗的草药数量
	STC_GAMECMD_PVP_RST						= STC_GAMECMD_OPERATE_BEGIN + 172,	// 玩家对战结果

	STC_GAMECMD_ARMY_ACCELERATE				= STC_GAMECMD_OPERATE_BEGIN + 166,	// 行军加速
	STC_GAMECMD_ARMY_BACK					= STC_GAMECMD_OPERATE_BEGIN + 167,	// 召回

	STC_GAMECMD_WORLDCITY_GET				= STC_GAMECMD_OPERATE_BEGIN + 173,	// 获得当前世界名城信息

	STC_GAMECMD_WORLDCITY_RANK_MAN			= STC_GAMECMD_OPERATE_BEGIN + 175,	// 获得当前奖杯个人排名
	STC_GAMECMD_WORLDCITY_RANK_ALLIANCE		= STC_GAMECMD_OPERATE_BEGIN + 176,	// 获得当前奖杯联盟排名

	STC_GAMECMD_WORLDCITY_GETLOG			= STC_GAMECMD_OPERATE_BEGIN + 174,	// 获得上次世界名城奖杯战绩个人
	STC_GAMECMD_WORLDCITY_GETLOG_ALLIANCE	= STC_GAMECMD_OPERATE_BEGIN + 177,	// 获得上次世界名城奖杯战绩联盟

	STC_GAMECMD_OPERATE_END					= STC_GAMECMD_OPERATE_BEGIN + 200,

	//////////////////////////////////////////////////////////////////////////
	// 服务器给客户端的一些通知
	//////////////////////////////////////////////////////////////////////////
	STC_GAMECMD_NOTIFY_BEGIN				= STC_GAMECMD_OPERATE_END + 0,
	STC_GAMECMD_POPULATION_ADD				= STC_GAMECMD_NOTIFY_BEGIN + 1,		// 增加了新的人口
	STC_GAMECMD_GOLD_CAN_FETCH				= STC_GAMECMD_NOTIFY_BEGIN + 2,		// 金子已经成熟
	STC_GAMECMD_BUILDING_TE					= STC_GAMECMD_NOTIFY_BEGIN + 3,		// 建筑时间事件通知
	STC_GAMECMD_RESEARCH_TE					= STC_GAMECMD_NOTIFY_BEGIN + 4,		// 研究时间事件通知
	STC_GAMECMD_CHAR_IS_ONLINE				= STC_GAMECMD_NOTIFY_BEGIN + 5,		// 查询某玩家是否在线
	STC_GAMECMD_CHRISTMAS_TREE_READY_RIPE	= STC_GAMECMD_NOTIFY_BEGIN + 6,		// 许愿树准备成熟
	STC_GAMECMD_CHRISTMAS_TREE_RIPE			= STC_GAMECMD_NOTIFY_BEGIN + 7,		// 许愿树成熟
	STC_GAMECMD_NEW_ALLIANCE_MAIL			= STC_GAMECMD_NOTIFY_BEGIN + 8,		// 新的联盟邮件
	STC_GAMECMD_TRAINING_OVER				= STC_GAMECMD_NOTIFY_BEGIN + 9,		// 训练结束通知
	STC_GAMECMD_NEW_FRIEND_APPLY			= STC_GAMECMD_NOTIFY_BEGIN + 10,	// 新的好友申请到来
	STC_GAMECMD_IN_ALLIANCE					= STC_GAMECMD_NOTIFY_BEGIN + 11,	// 你被允许加入联盟通知
	STC_GAMECMD_NEW_ALLIANCE_JOIN			= STC_GAMECMD_NOTIFY_BEGIN + 12,	// 新的申请通知
	STC_GAMECMD_NEW_ENEMY					= STC_GAMECMD_NOTIFY_BEGIN + 13,	// 新的敌人
	STC_GAMECMD_NEW_NOTIFICATION			= STC_GAMECMD_NOTIFY_BEGIN + 14,	// 新的通知
	STC_GAMECMD_RECHARGE_DIAMOND			= STC_GAMECMD_NOTIFY_BEGIN + 15,	// 充值成功通知
	STC_GAMECMD_BUILD_ITEM_USE_OUT			= STC_GAMECMD_NOTIFY_BEGIN + 16,	// 工匠之书使用结束，建筑队列变化
	STC_GAMECMD_EXPELED_ALLI				= STC_GAMECMD_NOTIFY_BEGIN + 17,	// 被开除出联盟
	STC_GAMECMD_NEW_ALLIANCE_POSITION		= STC_GAMECMD_NOTIFY_BEGIN + 18,	// 被设置了新的职位
	STC_GAMECMD_ADCOLONY_AWARD				= STC_GAMECMD_NOTIFY_BEGIN + 19,	// 观看AdColony的奖励
	STC_GAMECMD_DONATE_SOLDIER_TE			= STC_GAMECMD_NOTIFY_BEGIN + 20,	// 联盟赠送士兵时间队列
	STC_GAMECMD_WORLD_RES_CLEAR				= STC_GAMECMD_NOTIFY_BEGIN + 21,	// 世界资源被清理
	STC_GAMECMD_HERO_SIMPLE_DATA			= STC_GAMECMD_NOTIFY_BEGIN + 22,	// 英雄简单信息

	STC_GAMECMD_COMBAT_RST					= STC_GAMECMD_NOTIFY_BEGIN + 51,	// 战斗结果
	STC_GAMECMD_NOTIFY_END					= STC_GAMECMD_NOTIFY_BEGIN + 200,

	//////////////////////////////////////////////////////////////////////////
	// 联盟副本
	//////////////////////////////////////////////////////////////////////////
	STC_GAMECMD_ALLI_INSTANCE_BEGIN			= STC_GAMECMD_NOTIFY_END,
	STC_GAMECMD_ALLI_INSTANCE_CREATE		= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 1,		// 创建副本
	STC_GAMECMD_ALLI_INSTANCE_JOIN			= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 2,		// 加入副本
	STC_GAMECMD_ALLI_INSTANCE_EXIT			= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 3,		// 退出副本
	STC_GAMECMD_ALLI_INSTANCE_KICK			= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 4,		// 踢出副本
	STC_GAMECMD_ALLI_INSTANCE_DESTROY		= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 5,		// 销毁副本
	STC_GAMECMD_ALLI_INSTANCE_CONFIG_HERO	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 6,		// 配置将领
	STC_GAMECMD_ALLI_INSTANCE_START			= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 7,		// 副本出征
	STC_GAMECMD_ALLI_INSTANCE_READY			= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 8,		// 准备就绪
	STC_GAMECMD_ALLI_INSTANCE_GET_LIST		= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 9,		// 获取副本列表
	STC_GAMECMD_ALLI_INSTANCE_GET_CHAR_DATA	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 10,		// 获取副本角色详细信息
	STC_GAMECMD_ALLI_INSTANCE_GET_HERO_DATA	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 11,		// 获取副本将领详细信息
	STC_GAMECMD_ALLI_INSTANCE_GET_STATUS	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 12,		// 自己的副本状态
	STC_GAMECMD_ALLI_INSTANCE_GET_LOOT		= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 13,		// 获取掉落
	STC_GAMECMD_ALLI_INSTANCE_SAVE_HERO_DEPLOY	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 14,	// 保存将领布局
	STC_GAMECMD_ALLI_INSTANCE_START_COMBAT	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 15,		// 开始战斗
	STC_GAMECMD_ALLI_INSTANCE_ACTION_NOTIFY	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 16,		// 副本玩家行为通知
	STC_GAMECMD_ALLI_INSTANCE_GET_COMBAT_LOG	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 17,		// 副本战报
	STC_GAMECMD_ALLI_INSTANCE_BACK			= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 18,		// 战斗返回
	STC_GAMECMD_ALLI_INSTANCE_GET_SIMPLE_COMBAT_LOG	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 19,	// 副本简单战报
	STC_GAMECMD_ALLI_INSTANCE_STOP_COMBAT	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 20,		// 停止战斗
	STC_GAMECMD_ALLI_INSTANCE_SUPPLY		= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 21,		// 补给
	STC_GAMECMD_ALLI_INSTANCE_GET_DEFENDER_DEPLOY	= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 22,		// 获取军队布局
	STC_GAMECMD_ALLI_INSTANCE_END			= STC_GAMECMD_ALLI_INSTANCE_BEGIN + 100,

	//////////////////////////////////////////////////////////////////////////
	// 竞技场
	//////////////////////////////////////////////////////////////////////////
	STC_GAMECMD_ARENA_BEGIN					= STC_GAMECMD_ALLI_INSTANCE_END,
	STC_GAMECMD_ARENA_UPLOAD_DATA			= STC_GAMECMD_ARENA_BEGIN + 1,
	STC_GAMECMD_ARENA_GET_RANK_LIST			= STC_GAMECMD_ARENA_BEGIN + 2,
	STC_GAMECMD_ARENA_GET_STATUS			= STC_GAMECMD_ARENA_BEGIN + 3,
	STC_GAMECMD_ARENA_PAY					= STC_GAMECMD_ARENA_BEGIN + 4,
	STC_GAMECMD_ARENA_GET_DEPLOY			= STC_GAMECMD_ARENA_BEGIN + 5,
	STC_GAMECMD_ARENA_END					= STC_GAMECMD_ARENA_BEGIN + 100,

	//////////////////////////////////////////////////////////////////////////
	// 将领
	//////////////////////////////////////////////////////////////////////////
	STC_GAMECMD_HERO_BEGIN					= STC_GAMECMD_ARENA_END,
	STC_GAMECMD_HERO_SUPPLY					= STC_GAMECMD_HERO_BEGIN + 1,				// 将领补给
	STC_GAMECMD_HERO_END					= STC_GAMECMD_HERO_BEGIN + 200,

	//////////////////////////////////////////////////////////////////////////
	// 位置收藏夹
	//////////////////////////////////////////////////////////////////////////
	STC_GAMECMD_POSITION_MARK_BEGIN			= STC_GAMECMD_HERO_END,
	STC_GAMECMD_POSITION_MARK_ADD_RECORD	= STC_GAMECMD_POSITION_MARK_BEGIN + 1,
	STC_GAMECMD_POSITION_MARK_CHG_RECORD	= STC_GAMECMD_POSITION_MARK_BEGIN + 2,
	STC_GAMECMD_POSITION_MARK_DEL_RECORD	= STC_GAMECMD_POSITION_MARK_BEGIN + 3,
	STC_GAMECMD_POSITION_MARK_GET_RECORD	= STC_GAMECMD_POSITION_MARK_BEGIN + 4,
	STC_GAMECMD_POSITION_MARK_END			= STC_GAMECMD_POSITION_MARK_BEGIN + 10,
};
//////////////////////////////////////////////////////////////////////////
// 指令结构
//////////////////////////////////////////////////////////////////////////
#pragma pack(1)
// CLIENT->LP
struct CTS_GAMECMD_CHAT_PRIVATE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t			nPeerAccountID;
	unsigned int		nTextLen;
	char				szText[1];
};
struct CTS_GAMECMD_CHAT_ALLIANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int		nTextLen;
	char				szText[1];
};
struct CTS_GAMECMD_CHAT_WORLD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nTextLen;
	char				szText[1];
};
struct CTS_GAMECMD_CHAT_GET_RECENT_CHAT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{

};
struct CTS_GAMECMD_CHAT_GROUP_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nTextLen;
	char				szText[1];
};
struct CTS_GAMECMD_ADD_MAIL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t			nToCharID;
	int					nTextLen;
	char				szText[1];
};
struct CTS_GAMECMD_ADD_MAIL_WITH_EXT_DATA_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t			nToCharID;
	int					nTextLen;
	char				szText[1];
	// int				nExtDataLen;
	// char				szExtData[1];
};
struct CTS_GAMECMD_ADD_MAIL_N_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
// 	int					nNum;
// 	tty_id_t			nAccountID[1]
// 	int					nTextLen;
// 	char				szTextBegin[1];
};
struct CTS_GAMECMD_GET_MAIL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nFromNum;			// 起始条目
	unsigned int		nToNum;				// 结束条目
	unsigned char		nType;				// 类型
};
struct CTS_GAMECMD_READ_MAIL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int		nMailID;			// 所读邮件的id
};
struct CTS_GAMECMD_DELETE_MAIL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int		nMailID;			// 所删除邮件的id
};
struct CTS_GAMECMD_GET_MAIL_1_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nMailID;
};
struct CTS_GAMECMD_GET_NOTIFICATION_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_PLAYERCARD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t			nAccountID;		// 需要名片的账号ID
};
struct CTS_GAMECMD_GET_PLAYERCARD_POS_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nPosX;
	unsigned int		nPosY;
};
struct CTS_GAMECMD_GET_TILE_INFO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nPosX;
	unsigned int		nPosY;
};
struct CTS_GAMECMD_GET_BUILDING_LIST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_BUILDING_TE_LIST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_ALLIANCE_INFO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_GET_ALLIANCE_MEMBER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_ALLIANCE_BUILDING_TE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_ALLIANCE_BUILDING_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_ALLIANCE_JOIN_EVENT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_GET_CHAR_ATB_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_ALLIANCE_MAIL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nFromNum;			// 起始条目
	unsigned int		nToNum;				// 结束条目
};
struct CTS_GAMECMD_GET_ALLIANCE_LOG_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_PRIVATE_LOG_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_PLAYERCARD_NAME_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	char	szCharName[TTY_CHARACTERNAME_LEN];
};

struct CTS_GAMECMD_OPERATE_BUILD_BUILDING_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nExcelID;
	unsigned int		nAutoID;
};
struct CTS_GAMECMD_OPERATE_UPGRADE_BUILDING_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int		nAutoID;
};
struct CTS_GAMECMD_OPERATE_PRODUCE_GOLD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nAutoID;
	unsigned int		nProductionChoice;
};
struct CTS_GAMECMD_OPERATE_FETCH_GOLD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nAutoID;
};
struct CTS_GAMECMD_OPERATE_ACCE_BUILDING_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int		nAutoID;
	unsigned int		nType;				// te_subtype_building_build,te_subtype_building_upgrade
	unsigned int		nTime;				// 加速的时间(单位:秒)
	unsigned int		nMoneyType;
};
struct CTS_GAMECMD_OPERATE_ACCE_GOLD_PRODUCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nAutoID;
	unsigned int		nTime;				// 加速的时间(单位:秒)
	unsigned int		nMoneyType;
};
struct CTS_GAMECMD_GET_PRODUCTION_EVENT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t	nAccountID;		// 可能会拿自己的,也可能拿别人的
};
typedef CTS_GAMECMD_GET_PRODUCTION_EVENT_T CTS_GAMECMD_GET_PRODUCTION_TE_LIST_T;
struct CTS_GAMECMD_OPERATE_RESEARCH_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nExcelID;
};
struct CTS_GAMECMD_GET_TECHNOLOGY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_RESEARCH_TE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_OPERATE_CONSCRIPT_SOLDIER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nExcelID;
	unsigned int	nLevel;
	unsigned int	nNum;
};
struct CTS_GAMECMD_OPERATE_UPGRADE_SOLDIER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nExcelID;
	unsigned int	nFromLevel;
	unsigned int	nToLevel;
	unsigned int	nNum;
};
struct CTS_GAMECMD_GET_SOLDIER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_OPERATE_ACCE_RESEARCH_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nExcelID;
	unsigned int	nTime;
	unsigned int	nMoneyType;
};
// alliance
struct CTS_GAMECMD_OPERATE_ACCEPT_ALLI_MEMBER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nMemberID;
};
struct CTS_GAMECMD_OPERATE_BUILD_ALLI_BUILDING_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nExcelID;
};
struct CTS_GAMECMD_OPERATE_CANCEL_JOIN_ALLI_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	
};
struct CTS_GAMECMD_OPERATE_CREATE_ALLI_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	char			szAllianceName[TTY_ALLIANCENAME_LEN];
};
struct CTS_GAMECMD_OPERATE_DISMISS_ALLI_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_OPERATE_EXIT_ALLI_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_OPERATE_EXPEL_ALLI_MEMBER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nMemberID;
};
struct CTS_GAMECMD_OPERATE_JOIN_ALLI_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nAllianceID;
};
struct CTS_GAMECMD_OPERATE_SET_ALLI_POSITION_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nMemberID;
	unsigned int	nPosition;
};
struct CTS_GAMECMD_OPERATE_REFUSE_JOIN_ALLI_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nApplicantID;
};
struct CTS_GAMECMD_OPERATE_ABDICATE_ALLI_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	char			szMemberName[TTY_CHARACTERNAME_LEN];
};
struct CTS_GAMECMD_OPERATE_ADD_ALLIANCE_MAIL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nLen;
	char			szText[1];
};
struct CTS_GAMECMD_OPERATE_BUY_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nExcelID;
	unsigned int	nNum;
	unsigned int	nMoneyType;
};
struct CTS_GAMECMD_OPERATE_SELL_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nItemID;
	unsigned int	nNum;
};
struct CTS_GAMECMD_GET_RELATION_LOG_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_OPERATE_FETCH_CHRISTMAS_TREE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_OPERATE_WATERING_CHRISTMAS_TREE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nPeerAccountID;
};
struct CTS_GAMECMD_OPERATE_STEAL_GOLD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nPeerAccountID;
	unsigned int	nAutoID;
};
struct CTS_GAMECMD_GET_TRAINING_TE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_OPERATE_ADD_TRAINING_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nTimeUnitNum;		// 就是时间长度,1代表1个基本时间单位，10代表10个基本时间单位(目前为小时)
	int				nNum;
	// 后面跟nNum个tty_id_t,hero_id
};
struct CTS_GAMECMD_OPERATE_EXIT_TRAINING_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nHeroID;
};
struct CTS_GAMECMD_TRAINING_OVER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nHeroID;
};

struct CTS_GAMECMD_OPERATE_TAVERN_REFRESH_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nUseItem;
};
struct CTS_GAMECMD_OPERATE_HIRE_HERO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nSlotID;
	tty_id_t		nHeroID;
};
struct CTS_GAMECMD_OPERATE_FIRE_HERO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nHeroID;
};
struct CTS_GAMECMD_OPERATE_LEVELUP_HERO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nHeroID;
};
struct CTS_GAMECMD_OPERATE_ADD_GROW_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nHeroID;
	float			fGrow;
};
struct CTS_GAMECMD_OPERATE_CONFIG_HERO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nHeroID;
	int				nArmyType;
	int				nArmyLevel;
	int				nArmyNum;
};
struct CTS_GAMECMD_OPERATE_GET_HERO_REFRESH_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_OPERATE_GET_HERO_HIRE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_OPERATE_START_COMBAT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nObjID;
	int				nCombatType;
	int				nAutoCombat;
	int				nAutoSupply;
	tty_id_t		n1Hero;
	tty_id_t		n2Hero;
	tty_id_t		n3Hero;
	tty_id_t		n4Hero;
	tty_id_t		n5Hero;
	int				nStopLevel;
};
struct CTS_GAMECMD_OPERATE_STOP_COMBAT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nCombatID;
};
struct CTS_GAMECMD_OPERATE_GET_COMBAT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nCombatID;
};
struct CTS_GAMECMD_OPERATE_SAVE_COMBAT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nCombatID;
};
struct CTS_GAMECMD_OPERATE_LIST_COMBAT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_OPERATE_CONFIG_CITYDEFENSE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		n1Hero;
	tty_id_t		n2Hero;
	tty_id_t		n3Hero;
	tty_id_t		n4Hero;
	tty_id_t		n5Hero;
	int				nAutoSupply;
};
// 道具
struct CTS_GAMECMD_GET_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_ADD_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
	int				nNum;
};
struct CTS_GAMECMD_DEL_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nItemID;
	int				nNum;
};
struct CTS_GAMECMD_EQUIP_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nHeroID;
	tty_id_t		nItemID;
};
struct CTS_GAMECMD_DISEQUIP_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nHeroID;
	tty_id_t		nItemID;
};
struct CTS_GAMECMD_MOUNT_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nHeroID;
	tty_id_t		nEquipID;
	int				nSlotIdx;
	int				nExcelID;
};
struct CTS_GAMECMD_UNMOUNT_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nHeroID;
	tty_id_t		nEquipID;
	int				nSlotIdx;
};
struct CTS_GAMECMD_COMPOS_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
	int				nNum;
};
struct CTS_GAMECMD_DISCOMPOS_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
	int				nNum;
};
struct CTS_GAMECMD_EQUIP_ITEM_ALL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nHeroID;
	tty_id_t		n1HeadID;
	tty_id_t		n2ChestID;
	tty_id_t		n3ShoeID;
	tty_id_t		n4WeaponID;
	tty_id_t		n5TrinketID;
};
struct CTS_GAMECMD_MOUNT_ITEM_ALL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nHeroID;
	tty_id_t		nEquipID;
	int				n1ExcelID;
	int				n2ExcelID;
	int				n3ExcelID;
	int				n4ExcelID;
};
// 任务
struct CTS_GAMECMD_GET_QUEST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_DONE_QUEST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
};
// 副本
struct CTS_GAMECMD_GET_INSTANCESTATUS_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_INSTANCEDESC_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
	int				nClassID;
};
struct CTS_GAMECMD_CREATE_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
	int				nClassID;
};
struct CTS_GAMECMD_JOIN_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
	tty_id_t		nInstanceID;
};
struct CTS_GAMECMD_QUIT_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
	tty_id_t		nInstanceID;
};
struct CTS_GAMECMD_DESTROY_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
	tty_id_t		nInstanceID;
};
struct CTS_GAMECMD_GET_INSTANCEDATA_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
	tty_id_t		nInstanceID;
};
struct CTS_GAMECMD_CONFIG_INSTANCEHERO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nExcelID;
	tty_id_t		nInstanceID;
	tty_id_t		n1Hero;
	tty_id_t		n2Hero;
	tty_id_t		n3Hero;
	tty_id_t		n4Hero;
	tty_id_t		n5Hero;
};
struct CTS_GAMECMD_GET_INSTANCELOOT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nExcelID;
	tty_id_t		nInstanceID;
};
struct CTS_GAMECMD_AUTO_COMBAT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nInstanceID;
	int				nVal;
};
struct CTS_GAMECMD_KICK_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nExcelID;
	tty_id_t		nInstanceID;
	tty_id_t		nObjID;
};
struct CTS_GAMECMD_START_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nExcelID;
	tty_id_t		nInstanceID;
};
struct CTS_GAMECMD_PREPARE_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nExcelID;
	tty_id_t		nInstanceID;
	int				nVal;
};
struct CTS_GAMECMD_SUPPLY_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nExcelID;
	tty_id_t		nInstanceID;
};

struct CTS_GAMECMD_USE_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nHeroID;
	int				nExcelID;
	int				nNum;
};
struct CTS_GAMECMD_SYNC_CHAR_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_SYNC_HERO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nHeroID;
};
struct CTS_GAMECMD_AUTO_SUPPLY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nInstanceID;
	int				nVal;
};
struct CTS_GAMECMD_GET_EQUIP_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_GET_GEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_MANUAL_SUPPLY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nInstanceID;
	int				nCombatType;
	tty_id_t		n1Hero;
	tty_id_t		n2Hero;
	tty_id_t		n3Hero;
	tty_id_t		n4Hero;
	tty_id_t		n5Hero;
};
struct CTS_GAMECMD_REPLACE_EQUIP_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nHeroID;
	int				nEquipType;
	tty_id_t		nItemID;
};
struct CTS_GAMECMD_GET_WORLDGOLDMINE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nArea;
	int				nClass;
	int				nIdx;
};
struct CTS_GAMECMD_CONFIG_WORLDGOLDMINE_HERO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		n1Hero;
	tty_id_t		n2Hero;
	tty_id_t		n3Hero;
	tty_id_t		n4Hero;
	tty_id_t		n5Hero;
};
struct CTS_GAMECMD_ROB_WORLDGOLDMINE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nArea;
	int				nClass;
	int				nIdx;
	tty_id_t		n1Hero;
	tty_id_t		n2Hero;
	tty_id_t		n3Hero;
	tty_id_t		n4Hero;
	tty_id_t		n5Hero;
};
struct CTS_GAMECMD_DROP_WORLDGOLDMINE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_MY_WORLDGOLDMINE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_COMBAT_PROF_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	int				nClassID;
	tty_id_t		nObjID;
	int				nCombatType;
};
struct CTS_GAMECMD_GET_CITYDEFENSE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_USE_DRUG_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nNum;
	// 后面跟nNum个nHeroID
};


struct CTS_GAMECMD_CHAR_IS_ONLINE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nAccountID;
};
// 好友
struct CTS_GAMECMD_GET_MY_FRIEND_APPLY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_OTHERS_FRIEND_APPLY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_FRIEND_LIST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_OPERATE_APPROVE_FRIEND_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nPeerAccountID;
};
struct CTS_GAMECMD_OPERATE_APPLY_FRIEND_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nPeerAccountID;
};
struct CTS_GAMECMD_OPERATE_REFUSE_FRIEND_APPLY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nPeerAccountID;
};
struct CTS_GAMECMD_OPERATE_CANCEL_FRIEND_APPLY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nPeerAccountID;
};
struct CTS_GAMECMD_OPERATE_DELETE_FRIEND_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nFriendID;
};
struct CTS_GAMECMD_GET_WORLD_AREA_INFO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nFromX;
	unsigned int	nFromY;
	unsigned int	nToX;
	unsigned int	nToY;
};
struct CTS_GAMECMD_ARMY_ACCELERATE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nCombatID;
	int				nTime;
	unsigned char	byType;
};
struct CTS_GAMECMD_ARMY_BACK_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nCombatID;
};
struct CTS_GAMECMD_WORLDCITY_GET_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_WORLDCITY_GETLOG_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nPageNum;
	int				nPageIdx;
};
struct CTS_GAMECMD_WORLDCITY_GETLOG_ALLIANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nPageNum;
	int				nPageIdx;
};
struct CTS_GAMECMD_WORLDCITY_RANK_MAN_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nPageNum;
	int				nPageIdx;
};
struct CTS_GAMECMD_WORLDCITY_RANK_ALLIANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nPageNum;
	int				nPageIdx;
};
struct CTS_GAMECMD_RECHARGE_TRY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nDiamond;
};
//////////////////////////////////////////////////////////////////////////
// LP->CLIENT
struct STC_GAMECMD_CHAT_PRIVATE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int		nChatID;
	char				szFrom[TTY_CHARACTERNAME_LEN];
	tty_id_t			nFromAccountID;
	char				szTo[TTY_CHARACTERNAME_LEN];
	tty_id_t			nToAccountID;
	time_t				nTime;
	unsigned int		nVip;
	unsigned int		nTextLen;
	char				szText[1];
};
struct STC_GAMECMD_CHAT_ALLIANCE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int		nChatID;
	char				szFrom[TTY_CHARACTERNAME_LEN];		// 聊天串的来源
	tty_id_t			nAccountID;
	time_t				nTime;
	unsigned int		nVip;
	unsigned int		nTextLen;
	char				szText[1];
};
struct STC_GAMECMD_CHAT_WORLD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	unsigned int		nChatID;
	char				szFrom[TTY_CHARACTERNAME_LEN];
	tty_id_t			nAccountID;
	time_t				nTime;
	unsigned int		nVip;
	unsigned int		nTextLen;
	char				szText[1];
};
struct STC_GAMECMD_WORLD_NOTIFY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	unsigned int		nChatID;
	char				szFrom[TTY_CHARACTERNAME_LEN];		// 聊天串的来源
	tty_id_t			nAccountID;
	time_t				nTime;
	unsigned int		nVip;
	unsigned int		nTextLen;
	char				szText[1];
};
struct STC_GAMECMD_CHAT_GROUP_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	unsigned int		nChatID;
	char				szFrom[TTY_CHARACTERNAME_LEN];
	tty_id_t			nAccountID;
	time_t				nTime;
	unsigned int		nVip;
	unsigned int		nTextLen;
	char				szText[1];
};
struct STC_GAMECMD_ADD_MAIL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_RECEIVER_NOT_EXIST	= -1,	// 接受者不存在
		RST_SENDER_SEND_MAX		= -2,	// 发送者今天不能再发送邮件
		RST_RECEIVER_MAIL_FULL	= -3,	// 邮箱已满
		RST_MGSID_NOT_EXIST		= -4,	// 邮件ID不存在(SQL有问题)
		RST_CANNOT_SEND_SELF	= -5,	// 邮件不能发给自己

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_TEXT_TOO_LONG		= -220,
	};
	tty_rst_t		nRst;
};
struct STC_GAMECMD_GET_MAIL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	int				nTotalMailNum;
	int				nUnreadMailNum;
	int				nNum;
	// 后续跟随nNum个PrivateMailUnit
};
struct STC_GAMECMD_NEW_PRIVATE_MAIL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	int				nTotalMailNum;
	// 一个PrivateMailUnit
};
struct STC_GAMECMD_ADD_MAIL_WITH_EXT_DATA_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_RECEIVER_NOT_EXIST	= -1,	// 接受者不存在
		RST_SENDER_SEND_MAX		= -2,	// 发送者今天不能再发送邮件
		RST_RECEIVER_MAIL_FULL	= -3,	// 邮箱已满
		RST_MGSID_NOT_EXIST		= -4,	// 邮件ID不存在(SQL有问题)

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_TEXT_TOO_LONG		= -220,
	};
	tty_rst_t		nRst;
};
struct STC_GAMECMD_READ_MAIL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nMailID;
};
struct STC_GAMECMD_DELETE_MAIL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nTotalMailNum;
	unsigned int	nMailID;
};
// struct STC_GAMECMD_GET_MAIL_1_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
// {
// 	enum
// 	{
// 		RST_OK					= 0,
// 		RST_NOT_EXIST			= -1,	// 不存在
// 
// 		// 其他返回值
// 		RST_DB_ERR				= -200,
// 		RST_SQL_ERR				= -201,
// 	};
// 	tty_rst_t		nRst;
// 	// 后面是一个PrivateMailUnit
// };
struct STC_GAMECMD_QUICK_LOGIN_KEY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	char			szQuickLoginKey[QUICK_LOGIN_KEY_LENGTH+1];
};
struct STC_GAMECMD_GET_NOTIFICATION_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_EXIST			= -1,
	};
	tty_rst_t			nRst;
	int					nNum;
};
struct STC_GAMECMD_GET_PLAYERCARD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NOTEXIST			= 1,			// 不存在
	};
	tty_rst_t			nRst;
	PlayerCard			card;
};
struct STC_GAMECMD_GET_TILE_INFO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int		nPosX;
	unsigned int		nPosY;
	tty_id_t			nAccountID;
	char				szName[TTY_CHARACTERNAME_LEN];
	tty_id_t			nAllianceID;
	char				szAllianceName[TTY_ALLIANCENAME_LEN];
};
struct STC_GAMECMD_GET_TILE_NONE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int		nPosX;
	unsigned int		nPosY;
};
struct STC_GAMECMD_GET_BUILDING_LIST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_DB_ERR				= -1,		// 数据库出错(断连等)
		RST_SQL_ERR				= -2,		// SQL错误
	};
	tty_rst_t		nRst;
	int				nNum;
	// 后面跟nNum个BuildingUnit
};
struct STC_GAMECMD_GET_BUILDING_TE_LIST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_DB_ERR				= -1,		// 数据库出错(断连等)
		RST_SQL_ERR				= -2,		// SQL错误
	};
	tty_rst_t		nRst;
	unsigned int	nTimeNow;				// 服务器当前时间
	int				nNum;
	// 后面跟nNum个BuildingTEUnit
};
struct STC_GAMECMD_GET_CHAR_ATB_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	CharAtb			charAtb;
};
struct STC_GAMECMD_GET_ALLIANCE_MAIL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		
		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	int				nTotalMailNum;
	int				nNum;
};
struct STC_GAMECMD_GET_ALLIANCE_LOG_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	int				nNum;
};
struct STC_GAMECMD_GET_PRIVATE_LOG_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	int				nNum;
};

struct STC_GAMECMD_OPERATE_BUILD_BUILDING_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	// 返回值
	enum
	{
		// 对应存储过程,build_building
		RST_OK						= 0,
		RST_ALREADY_BUILDING_AUTOID	= -1,		// 该AutoID上已经有建筑了
		RST_AUTOID_ERR				= -2,		// 不能在该位置建造建筑
		RST_GOLD_NOT_ENOUGH			= -3,		// 金钱不够
		RST_POPULATION_NOT_ENOUGH	= -4,		// 人口不足
		RST_BUILDING_QUEUE_ENOUGH	= -5,		// 建筑队列已满
		RST_BUILDING_NUM_MAX		= -6,		// 该建筑已经到达上限
		RST_UNKNOWN_ERR				= -100,		// 不明错误

		// 其他返回值
		RST_DB_ERR					= -200,
		RST_SQL_ERR					= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nExcelID;
	unsigned int		nAutoID;
	unsigned int		nAddedCharExp;
	unsigned int		nAddedCharDev;
	unsigned int		nCurCharExp;
	unsigned int		nCurCharLevel;
};
struct STC_GAMECMD_OPERATE_UPGRADE_BUILDING_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	// 返回值
	enum
	{
		// 对应存储过程,build_building
		RST_OK						= 0,
		RST_ALREADY_BUILDING_AUTOID	= -1,		// 该AutoID上已经有建筑了
		RST_BUILDING_QUEUE_ENOUGH	= -2,		// 建筑队列已满
		RST_BUILDING_LEVEL_MAX		= -3,		// 该建筑等级已经到达上限
		RST_GOLD_NOT_ENOUGH			= -4,		// 金钱不够
		RST_POPULATION_NOT_ENOUGH	= -5,		// 人口不足
		RST_UNKNOWN_ERR				= -100,		// 不明错误

		// 其他返回值
		RST_DB_ERR					= -200,
		RST_SQL_ERR					= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nAutoID;
	unsigned int		nExcelID;
	unsigned int		nAddedCharExp;
	unsigned int		nAddedCharDev;
	unsigned int		nCurCharExp;
	unsigned int		nCurCharLevel;
};
struct STC_GAMECMD_POPULATION_ADD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	int				nProduction;
};
struct STC_GAMECMD_BUILD_ITEM_USE_OUT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	int				nCurrentBuildNum;
};
struct STC_GAMECMD_OPERATE_PRODUCTION_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	// 返回值
	enum
	{
		// 对应存储过程,add_production_time_event
		RST_OK						= 0,
		RST_TE_ALREADY_EXIST		= -1,		// 事件已经存在
		RST_RIPE					= -2,		// 已经成熟,尚未采摘
		RST_GOLDORE_NOT_EXIST		= -3,		// 没有对应的金矿
		RST_CHOICE_ERR				= -4,		// 没有该生产选项
		RST_TYPE_ERR				= -5,		// 没有该生产类型
		RST_TE_INSERT_ERR			= -6,		// 事件插入出错
		RST_TE_DATA_INSERT_ERR		= -7,		// 事件数据插入出错

		// 其他返回值
		RST_DB_ERR					= -200,
		RST_SQL_ERR					= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nAutoID;
	unsigned int		nProduction;
};
struct STC_GAMECMD_OPERATE_PRODUCE_GOLD_T : public STC_GAMECMD_OPERATE_PRODUCTION_T 
{
	
};
struct STC_GAMECMD_FETCH_PRODUCTION_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	// 返回值
	enum
	{
		// 对应存储过程
		RST_OK						= 0,
		RST_EVENT_NOT_EXIST			= -1,		// 不存在该成熟事件
		RST_TYPE_ERR				= -2,		// 没有该类型的结果
		RST_TE_DEL_ERR				= -3,		// 事件删除出错

		// 其他返回值
		RST_DB_ERR					= -200,
		RST_SQL_ERR					= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nAutoID;
	unsigned int		nProduction;
};
struct STC_GAMECMD_OPERATE_FETCH_GOLD_T : public STC_GAMECMD_FETCH_PRODUCTION_T 
{
	
};
struct STC_GAMECMD_GOLD_CAN_FETCH_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int		nAutoID;
	unsigned int		nProduction;
};
struct STC_GAMECMD_CHRISTMAS_TREE_RIPE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{

};
struct STC_GAMECMD_NEW_ALLIANCE_MAIL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	// 一个AllianceMailUnit
};
struct STC_GAMECMD_GET_PRODUCTION_EVENT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		RST_DB_ERR		= -1,
		RST_SQL_ERR		= -2,
	};
	tty_rst_t			nRst;
	tty_id_t			nAccountID;
	int					nNum;
	// 后面跟nNum个ProductionEvent
};
struct STC_GAMECMD_GET_PRODUCTION_TE_LIST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		RST_DB_ERR		= -1,
		RST_SQL_ERR		= -2,
	};
	tty_rst_t			nRst;
	tty_id_t			nAccountID;
	unsigned int		nTimeNow;
	int					nNum;
	// 后面跟nNum个ProductionTimeEvent
};
struct STC_GAMECMD_BUILDING_TE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int		nAutoID;
	unsigned int		nExcelID;
	unsigned int		nType;			// te_subtype_building_build等
};
struct STC_GAMECMD_OPERATE_ACCE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK						= 0,
		RST_TYPE_ERR				= -1,			// 类型不对
		RST_DIAMOND_NOT_ENOUGH		= -2,			// 钻石不够
		RST_CHANGE_TIME_FAIL		= -3,			// 修改时间失败

		RST_CRYSTAL_NOT_ENOUGH		= -10,			// 水晶不够
		RST_MONEYTYPE_ERR			= -11,			// 金钱类型不对(moneytype_xxx)
		RST_DISCOUNT_DIAMOND_0		= -12,			// 打折后钻石为0
		RST_DISCOUNT_CRYSTAL_0		= -13,			// 打折后水晶为0

		// 存储过程执行失败
		RST_DB_EXE_ERR				= -100,			// 数据库执行存储过程出错
		RST_SELECT_INTO				= -101,		// select into出错
		RST_VALUE_OVERFLOW			= -102,			// 值溢出
		RST_DEADLOCK				= -103,			// 死锁

		// 其他错误
		RST_DB_ERR					= -200,
		RST_SQL_ERR					= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nAutoID;
	unsigned int		nTime;			// 加速的时间,单位:秒(s)
	unsigned int		nMoneyNum;		// 花销的金钱数量
	unsigned int		nMoneyType;		// 金钱类型
	unsigned int		nExcelID;
};
struct STC_GAMECMD_OPERATE_ACCE_BUILDING_T : public STC_GAMECMD_OPERATE_ACCE_T
{
	unsigned int		nType;
};
struct STC_GAMECMD_OPERATE_ACCE_GOLD_PRODUCE_T : public STC_GAMECMD_OPERATE_ACCE_T 
{

};
struct STC_GAMECMD_OPERATE_ACCE_RESEARCH_T : public STC_GAMECMD_OPERATE_ACCE_T 
{

};
struct STC_GAMECMD_OPERATE_RESEARCH_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_TECH_NOT_EXISTS		= -1,		// 不存在这种科技
		RST_TECH_LEVEL_MAX		= -2,		// 科技已经达到上限
		RST_INST_NOT_EXISTS		= -3,		// 未建造研究院
		RST_INST_LEVEL_ERR		= -4,		// 研究院等级不够
		RST_ALREADY_RESEARCH	= -5,		// 已经有科技在研究中
		RST_GOLD_NOT_ENOUGH		= -6,		// 金钱不够
		RST_INSERT_TE_ERR		= -7,		// 时间事件插入失败
		RST_INSERT_TE_DATA_ERR	= -8,		// 事件数据插入失败
		
		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR					= -200,
		RST_SQL_ERR					= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nLevel;
	unsigned int		nTime;
	unsigned int		nGold;
	unsigned int		nExcelID;
};
struct STC_GAMECMD_GET_TECHNOLOGY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,

		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟nNum个TechnologyUnit
};
struct STC_GAMECMD_GET_RESEARCH_TE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,

		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nTimeNow;
	int					nNum;
	// 后面跟nNum个ResearchTimeEvent
};
// 获取alliance数据
struct STC_GAMECMD_GET_ALLIANCE_INFO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		RST_NO_ALLI		= -1,		// 联盟不存在

		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,

		RST_LOADING		= -220,		// 载入中
	};
	tty_rst_t			nRst;
	AllianceUnit		alliance;
	unsigned int		nMemberNum;
	unsigned int		nMemberMaxNum;
	unsigned int		nMyPosition;	// 见枚举alliance_position_member等
	unsigned int		nLevel;
	unsigned int		nDevelopment;
	unsigned int		nTotalDevelopment;
};
struct STC_GAMECMD_GET_ALLIANCE_MEMBER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		RST_NO_ALLI		= -1,

		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,

		RST_LOADING		= -220,		// 载入中
	};
	tty_rst_t			nRst;
	unsigned int		nNum;
	// 后面跟nNum个AllianceMemberUnit
};
struct STC_GAMECMD_GET_ALLIANCE_BUILDING_TE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		RST_NO_ALLI		= -1,

		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,

		RST_LOADING		= -220,		// 载入中
	};
	tty_rst_t			nRst;
	unsigned int		nNum;
	// 后面跟nNum个AllianceBuildingTimeEvent
};
struct STC_GAMECMD_GET_ALLIANCE_BUILDING_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		RST_NO_ALLI		= -1,

		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,

		RST_LOADING		= -220,		// 载入中
	};
	tty_rst_t			nRst;
	unsigned int		nNum;
	// 后面跟nNum个AllianceBuildingUnit
};
struct STC_GAMECMD_GET_ALLIANCE_JOIN_EVENT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		RST_NO_ALLI		= -1,

		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,

		RST_LOADING		= -220,		// 载入中
	};
	tty_rst_t			nRst;
	unsigned int		nNum;
	// 后面跟nNum个AllianceJoinEvent
};

struct STC_GAMECMD_RESEARCH_TE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	unsigned int		nExcelID;
	unsigned int		nLevel;
};
struct STC_GAMECMD_OPERATE_CONSCRIPT_SOLDIER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_TYPE_ERR			= -1,		// 不存在该兵种
		RST_TECH_ERR			= -2,		// 科技等级不够
		RST_POPULATION_ERR		= -3,		// 人口不足
		RST_GOLD_ERR			= -4,		// 金钱不够
		RST_GET_CAPACITY		= -5,		// 获取兵营容量时出错
		RST_CAPACITY			= -6,		// 兵营容量不够
		RST_DEDUCT_ERR			= -7,		// 扣除金钱人口时出错
		RST_ADD_SOLDIER			= -8,		// 插入士兵时出错

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nExcelID;
	unsigned int	nLevel;
	unsigned int	nGold;
	unsigned int	nNum;
};
struct STC_GAMECMD_OPERATE_UPGRADE_SOLDIER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_TECH_ERR			= -1,		// 科技等级不够
		RST_SOLDIER_NUM			= -2,		// 原等级兵种不够
		RST_GOLD				= -3,		// 金钱不够
		RST_ADD_SOLDIER			= -4,		// 插入士兵时出错

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nExcelID;
	unsigned int	nFromLevel;
	unsigned int	nToLevel;
	unsigned int	nGold;
	unsigned int	nNum;
};
struct STC_GAMECMD_GET_SOLDIER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,

		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟nNum个SoldierUnit
};
// 好友
struct STC_GAMECMD_GET_MY_FRIEND_APPLY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nNum;
	// 后面nNum个FriendApplyUnit
};
struct STC_GAMECMD_GET_OTHERS_FRIEND_APPLY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nNum;
	// 后面nNum个FriendApplyUnit
};
struct STC_GAMECMD_GET_FRIEND_LIST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nNum;
	// 后面nNum个FriendUnit
};
struct STC_GAMECMD_OPERATE_APPROVE_FRIEND_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_EVENT			= -1,		// 申请好友事件不存在
		RST_MY_FRIEND_MAX		= -2,		// 自己好友已达上限
		RST_PEER_FRIEND_MAX		= -3,		// 对方好友已达上限
		RST_YOURSELF			= -4,		// 不能向自己申请好友

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	FriendUnit			friendUnit;
};
struct STC_GAMECMD_OPERATE_APPLY_FRIEND_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_ALREADY_FRIEND		= -1,		// 已经是好友了
		RST_ALREADY_EVENT		= -2,		// 已经有申请事件了
		RST_YOURSELF			= -3,		// 不能向自己申请好友
		RST_SELF_MAX_FRIEND		= -4,		// 自己好友已达上限
		RST_PEER_MAX_FRIEND		= -5,		// 对方好友已达上限

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nPeerAccountID;
};
struct STC_GAMECMD_OPERATE_REFUSE_FRIEND_APPLY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_EVENT			= -1,		// 没有申请事件

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nPeerAccountID;
};
struct STC_GAMECMD_OPERATE_CANCEL_FRIEND_APPLY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_EVENT			= -1,		// 没有申请事件

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nPeerAccountID;
};
struct STC_GAMECMD_OPERATE_DELETE_FRIEND_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_EVENT			= -1,		// 没有申请事件

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nPeerAccountID;
};

struct STC_GAMECMD_OPERATE_TAVERN_REFRESH_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,	// 成功，普通刷新
		RST_OK_USEITEM	= 1,	// 成功，道具刷新
		RST_ISNULL		= -2,	// 酒馆不存在
		RST_CD			= -3,	// 刷新冷却中
		RST_ITEM		= -4,	// 没有道具
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nCD;
};
struct STC_GAMECMD_OPERATE_HIRE_HERO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		RST_TAVERN_ERR	= -2,	// 酒馆不存在
		RST_HERO_ERR	= -3,	// 武将不存在
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nHeroID;
	int					nSlotID;
};
struct STC_GAMECMD_OPERATE_FIRE_HERO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		RST_HERO_ERR	= -2,	// 武将不存在
		RST_EQUIP		= -3,	// 武将还穿着装备
		RST_ARMY		= -4,	// 武将还带着部队
		RST_CITYDEFENSE	= -5,	// 在城防配置里
		RST_INSTANCE	= -6,	// 在副本配置里
		RST_WORLDGOLDMINE	= -7,	// 在世界金矿配置里
		RST_STATUS		= -8,	// 武将不是空闲状态
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_OPERATE_LEVELUP_HERO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		RST_HERO_ERR	= -2,	// 武将不存在
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_OPERATE_ADD_GROW_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		RST_HERO_ERR	= -1,	// 武将不存在
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_OPERATE_CONFIG_HERO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		RST_HERO_ERR	= -2,	// 武将不存在
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nProf;
};
struct STC_GAMECMD_OPERATE_GET_HERO_REFRESH_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟 RefreshHero
};
struct STC_GAMECMD_OPERATE_GET_HERO_HIRE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟 HireHero
};
struct STC_GAMECMD_OPERATE_START_COMBAT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 1,
		RST_HERO_ERR		= -2,	// 武将不在空闲状态，此时 nCombatID 为武将ID
		RST_OBJ_ERR			= -3,	// 不能对自己开战
		RST_COMBAT_ID		= -4,	// 副本生成失败
		RST_NOTEND			= -10,	// 上一次副本战斗还未结束
		RST_HERO_ISNULL		= -13,	// 不能没有武将
		RST_LEADER			= -14,	// 队长才能发起战斗
		RST_START_INSTANCE	= -15,	// 副本不是在出征状态
		RST_PREPARE			= -16,	// 没有准备好的玩家
		RST_OBJ_NULL		= -17,	// 目标不存在
		RST_COMBATTYPE		= -18,	// 战斗类型错误
		RST_PROTECT			= -19,	// 目标在保护期内
		RST_PVPQUEUE		= -20,	// 出征队列已满
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nCombatID;
	int					nCombatType;
	int					nGoTime;
	int					nBackTime;
	int					nAutoCombat;
};
struct STC_GAMECMD_OPERATE_STOP_COMBAT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 1,
		RST_DELETE			= 0,		// 副本销毁失败
		RST_AUTOCOMBAT		= 2,		// 自动战斗，切换关卡
		RST_FINISH			= 3,		// 副本通关
		RST_OVER			= 4,		// 副本结束，重试次数用完
		RST_ISNULL			= -2,		// 副本不存在
		RST_RESTART			= -3,		// 自动战斗，开始下一次战斗失败
		RST_DESTROYINSTANCE	= -4,		// 副本结束时销毁失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nCombatRst;
	tty_id_t			nCombatID;
	int					nCombatType;
	tty_id_t			n1Hero;
	tty_id_t			n2Hero;
	tty_id_t			n3Hero;
	tty_id_t			n4Hero;
	tty_id_t			n5Hero;
	int					nDrug;
	tty_id_t			nNewCombatID;
	int					nGoTime;
	int					nBackTime;
	int					nNum;
	// 是副本战斗并且开启自动补给，后面跟 InstanceHeroDesc
};
struct STC_GAMECMD_OPERATE_GET_COMBAT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nCombatID;
	int					nCombatType;
	int					nNumA;
	int					nNumD;
	char				szObjName[32];
	int					nObjHeadID;
	// 后面跟 CombatUnit
};

// alliance
struct STC_GAMECMD_OPERATE_ACCEPT_ALLI_MEMBER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,		// 成功
		RST_NO_JOIN_EVENT		= -1,		// 没有申请加入联盟
		RST_NO_RIGHT			= -2,		// 没有权限批准加入
		RST_MEMBER_FULL			= -3,		// 人数已满
		RST_SET_ALLI_ID			= -4,		// 设置玩家的联盟ID出错
		RST_ADD_MEMBER			= -5,		// 插入成员表出错
		RST_DELETE_EVENT		= -6,		// 删除申请事件出错
		RST_ADD_DEVELOPMENT		= -7,		// 增加联盟发展度出错

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nMemberID;
};
struct STC_GAMECMD_OPERATE_BUILD_ALLI_BUILDING_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_ALLI				= -1,		// 没有联盟
		RST_NO_BUILD_RIGHT		= -2,		// 没有建设权限
		RST_EXIST_BUILD_EVENT	= -3,		// 已经在建设中了
		RST_NO_CONGRESS			= -4,		// 议会不存在
		RST_LEVEL_MAX			= -5,		// 当前等级已达上限
		RST_DEVELOPMENT			= -6,		// 发展度不够扣除
		RST_ADD_TE				= -7,		// 插入时间事件出错
		RST_ADD_TE_DATA			= -8,		// 插入时间事件数据出错

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nExcelID;
	unsigned int		nType;
};
struct STC_GAMECMD_OPERATE_CANCEL_JOIN_ALLI_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_OPERATE_CREATE_ALLI_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_ALREADY_IN_ALLI		= -1,		// 已经有联盟了,先退出或解散才能创建联盟
		RST_NAME_DUP			= -2,		// 联盟名字重复
		RST_GOLD				= -3,		// 黄金不够
		RST_ALLI_CREATE			= -4,		// 联盟创建出错
		RST_SET_POSITIOn		= -5,		// 设置权限出错
		RST_SET_ALLI_ID			= -6,		// 设置联盟ID出错

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_NAME_INVALID		= -220,		// 联盟名字非法
	};
	tty_rst_t		nRst;
	tty_id_t		nAllianceID;
	unsigned int	nGold;
};
struct STC_GAMECMD_OPERATE_DISMISS_ALLI_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_ALLIANCE			= -1,		// 没有联盟
		RST_NO_RIGHT			= -2,		// 无权限,只有盟主能解除
		RST_DEL_ALLI			= -3,		// 删除联盟数据出错
		RST_DEL_ALLI_JOIN_EVENT	= -4,		// 删除申请加入联盟事件出错
		RST_DEL_ALLI_MEMBER		= -5,		// 删除联盟成员出错
		RST_CLEAR_ALLI_ID		= -6,		// 清空联盟ID出错

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct STC_GAMECMD_OPERATE_EXIT_ALLI_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_ALLI				= -1,		// 没有联盟
		RST_LEADER				= -2,		// 盟主不能退出联盟,只能解散或者让位后退出

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct STC_GAMECMD_OPERATE_EXPEL_ALLI_MEMBER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_IN_ALLI			= -1,		// 你不在联盟中
		RST_MEMBER_NOT_IN_ALLI	= -2,		// 被开除者不在联盟中
		RST_POSITION			= -3,		// 职位不够
		RST_DEL_MEMBER			= -4,		// 从成员表中删除出错
		RST_CLEAR_ALLI_ID		= -5,		// 修改联盟ID出错

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nMemberID;
};
struct STC_GAMECMD_OPERATE_JOIN_ALLI_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_ALLI				= -1,		// 联盟不存在
		RST_ALREADY_ALLI		= -2,		// 已经有联盟了
		RST_ALREADY_APPLY		= -3,		// 已经申请过了
		RST_ADD_EVENT			= -4,		// 插入申请事件出错
		RST_ALLI_FULL			= -5,		// 联盟人数已满

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nAllianceID;
};
struct STC_GAMECMD_OPERATE_SET_ALLI_POSITION_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_IN_ALLI			= -1,		// 你不在联盟里
		RST_MEMBER_NOT_IN_ALLI	= -2,		// 被任命者不在联盟里
		RST_POSITION			= -3,		// 职位不够高
		RST_NO_RIGHT			= -4,		// 没权力任命
		RST_NO_CHG				= -5,		// 职位没变动
		RST_NO_POSITION			= -6,		// 没有该职位
		RST_FULL				= -7,		// 该职位人数已满

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nAllianceID;
	tty_id_t		nMemberID;
	unsigned int	nPosition;
};
struct STC_GAMECMD_OPERATE_REFUSE_JOIN_ALLI_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_MANAGER_NOT_IN_ALLI	= -1,		// 管理者不在联盟内
		RST_EVENT_NOT_EXIST		= -2,		// 没有申请加入事件
		RST_NO_RIGHT			= -3,		// 没有权力拒绝申请

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nApplicantID;
};
struct STC_GAMECMD_OPERATE_ABDICATE_ALLI_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_LEADER			= -1,		// 不是盟主,不能禅让
		RST_MEMBER_NOT_IN		= -2,		// 不能禅让给非联盟中成员

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct STC_GAMECMD_GET_RELATION_LOG_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_DB_ERR				= -1,		// 数据库出错(断连等)
		RST_SQL_ERR				= -2,		// SQL错误
	};
	tty_rst_t		nRst;
	int				nNum;
	// 后面跟nNum个RelationLogUnit
};
struct STC_GAMECMD_OPERATE_FETCH_CHRISTMAS_TREE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_RIPE			= -1,		// 尚未成熟
		RST_ADD_ITEM_FAIL		= -3,		// 添加道具失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	enum
	{
		award_type_none			= 0,
		award_type_crystal		= 1,
		award_type_item			= 2,
	};
	tty_rst_t		nRst;
	unsigned int	nType;
	unsigned int	nCrystal;
	unsigned int	nExcelID;
	tty_id_t		nItemID;
};
struct STC_GAMECMD_OPERATE_WATERING_CHRISTMAS_TREE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_ALREADY_RIPE		= -1,		// 已经成熟，不能浇水
		RST_READY_RIPE			= -2,		// 准备成熟，不能浇水
		RST_IN_CD				= -3,		// 自己给自己浇水，有CD
		RST_ALREADY_WATERING	= -4,		// 已经浇过水了(别人)

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct STC_GAMECMD_OPERATE_STEAL_GOLD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_STEAL_SELF			= -1,		// 不能自己偷自己
		RST_NOT_RIPE			= -2,		// 还没成熟
		RST_CANNOT_STEAL		= -3,		// 不能偷
		RST_STEAL_NUM_MAX		= -4,		// 偷窃次数已满
		RST_ALREADY_STEAL		= -5,		// 已经偷过了
		RST_SUB_GOLD_ERR		= -10,		// 扣除黄金失败
		RST_GOLD_PROTECT		= -20,		// 现在是保护期

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nGold;
};
struct STC_GAMECMD_GET_TRAINING_TE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nNum;
	// 后面跟nNum个TrainingTimeEvent
};
struct STC_GAMECMD_OPERATE_ADD_TRAINING_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_ERR_STATUS			= -1,		// 将领状态不能修炼
		RST_TRAINING_HALL_LEVEL	= -2,		// 修炼馆等级太低
		RST_TOO_LONG_TIME		= -3,		// 修炼时间太长
		RST_NO_ENOUGH_GOLD		= -10,		// 黄金不够
		RST_ERR_ADD_TE			= -11,		// 添加时间事件出错
		RST_ERR_ADD_TE_DATA		= -12,		// 添加时间事件数据出错
		RST_ERR_CHANGE_STATUS	= -13,		// 修改将领状态出错

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct STC_GAMECMD_OPERATE_EXIT_TRAINING_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	HireHero		hero;
};
struct STC_GAMECMD_TRAINING_OVER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	HireHero		hero;
};
struct STC_GAMECMD_NEW_FRIEND_APPLY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	FriendApplyUnit	unit;
};

struct STC_GAMECMD_OPERATE_LIST_COMBAT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟 CombatDesc
};
struct STC_GAMECMD_OPERATE_CONFIG_CITYDEFENSE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
// 道具
struct STC_GAMECMD_GET_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟 ItemDesc
};
struct STC_GAMECMD_ADD_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_DEL_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_EQUIP_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_DISEQUIP_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_MOUNT_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 1,
		RST_INSERT			= 0,	// 插入镶嵌关联数据失败
		RST_ITEMISNULL		= -2,	// 道具不存在
		RST_BEMOUNT			= -3,	// 道具不可被镶嵌
		RST_GEMISNULL		= -4,	// 宝石不存在
		RST_MOUNT			= -5,	// 宝石不可镶嵌
		RST_SLOT			= -6,	// 没有镶嵌插槽了
		RST_TYPE			= -7,	// 已经有同类宝石了
		RST_DELETE			= -8,	// 从包裹删除宝石失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	// 后面跟 HeroDesc
};
struct STC_GAMECMD_UNMOUNT_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 1,
		RST_ITEMISNULL		= -2,	// 道具不存在
		RST_DELETE			= -3,	// 删除镶嵌关联数据失败
		RST_ADDITEM			= -4,	// 宝石放回包裹失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	// 后面跟 HeroDesc
};
struct STC_GAMECMD_COMPOS_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 0,
		RST_COMPOS			= -2,	// 道具不能合成
		RST_CFG				= -3,	// 合成配置表非法
		RST_LACK			= -4,	// 缺少材料
		RST_DELETEITEM		= -5,	// 从包裹删除材料失败
		RST_ADDITEM			= -6,	// 新道具放回包裹失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nItemID;
};
struct STC_GAMECMD_DISCOMPOS_ITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_EQUIP_ITEM_ALL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	// 后面跟 HeroDesc
};
struct STC_GAMECMD_MOUNT_ITEM_ALL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	// 后面跟 HeroDesc
};
// 任务
struct STC_GAMECMD_GET_QUEST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟 QuestDesc
};
struct STC_GAMECMD_DONE_QUEST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 0,
		RST_DONE			= -2,	// 已经做过了
		RST_CMN_CFG			= -3,	// 普通前提表非法
		RST_CMN				= -4,	// 普通前提不满足
		RST_DUP				= -5,	// 重复前提不满足
		RST_ADDITEM			= -6,	// 任务奖励道具放回包裹失败
		RST_COST			= -10,	// 任务消耗扣除失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
// 副本
struct STC_GAMECMD_GET_INSTANCESTATUS_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
};
struct STC_GAMECMD_GET_INSTANCEDESC_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nClassID;
	int					nNum;
	// 后面跟 InstanceDesc
};
struct STC_GAMECMD_CREATE_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 0,
		RST_INNOW			= -2,	// 已经在此副本里了
		RST_ISNULL			= -3,	// 副本ID不存在
		RST_LEVEL			= -4,	// 玩家等级未达到副本进入要求
		RST_OPENTIME		= -5,	// 此刻不在副本开放时段
		RST_TIMES			= -6,	// 当天的免费次数和收费次数都用完了
		RST_COST			= -7,	// 收费次数需要的消耗品没有
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nInstanceID;
};
struct STC_GAMECMD_JOIN_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 0,
		RST_INNOW			= -2,	// 已经在此副本里了
		RST_ISNULL			= -3,	// 副本ID不存在
		RST_LEVEL			= -4,	// 玩家等级未达到副本进入要求
		RST_OPENTIME		= -5,	// 此刻不在副本开放时段
		RST_TIMES			= -6,	// 当天的免费次数和收费次数都用完了
		RST_COST			= -7,	// 收费次数需要的消耗品没有
		RST_PLAYER			= -8,	// 副本满员了
		RST_START			= -9,	// 副本已经出征了
		RST_INSTANCE		= -16,	// 副本实例不存在
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_QUIT_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		RST_UPDATE		= -3,	// 更新副本人数时失败
		RST_COMBAT		= -4,	// 还在战斗中
		RST_ISNULL		= -5,	// 副本不存在
		RST_UNLOCK		= -6,	// 武将解锁失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nInstanceID;
};
struct STC_GAMECMD_DESTROY_INSTANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 0,
		RST_ISNULL			= -2,	// 副本不存在
		RST_UPDATE			= -3,	// 更新副本人数时失败
		RST_COMBAT			= -4,	// 还在战斗中
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nInstanceID;
};
struct STC_GAMECMD_GET_INSTANCEDATA_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nCurLevel;
	int					nAutoCombat;
	int					nAutoSupply;
	int					nRetryTimes;
	tty_id_t			nInstanceID;
	int					nNum;
	int					nNumHero;
	// 后面跟 InstanceData
	// 后面跟 CombatUnit
};
struct STC_GAMECMD_CONFIG_INSTANCEHERO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 0,
		RST_ISNULL			= -2,	// 副本不存在
		RST_COMBAT			= -3,	// 副本正在战斗中
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_GET_INSTANCELOOT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟 LootDesc
};
struct STC_GAMECMD_AUTO_COMBAT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_COMBAT_RST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	tty_id_t			nCombatID;
	int					nCombatType;
	tty_id_t			nObjID;
	char				szObjName[32];
	int					nObjHeadID;
	int					nRst;
	int					nNum;	// CombatRst的数量
	int					nClassID;
	// 后面跟 CombatRst
};
struct STC_GAMECMD_KICK_INSTANCE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 0,
		RST_TYPE			= -2,	// 不是多人副本
		RST_LEADER			= -3,	// 不是队长
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_START_INSTANCE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 0,
		RST_TYPE			= -2,	// 不是多人副本
		RST_LEADER			= -3,	// 不是队长
		RST_PREPARE			= -4,	// 还有玩家未准备就绪
		RST_PLAYER			= -5,	// 没有玩家准备就绪
		RST_STATUS			= -6,	// 更新副本状态失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			n1Hero;
	tty_id_t			n2Hero;
	tty_id_t			n3Hero;
	tty_id_t			n4Hero;
	tty_id_t			n5Hero;
};
struct STC_GAMECMD_PREPARE_INSTANCE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 0,
		RST_TYPE			= -2,	// 不是多人副本
		RST_HERO			= -3,	// 还未配置武将
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nStatus;
};
struct STC_GAMECMD_SUPPLY_INSTANCE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 0,
		RST_TYPE			= -2,	// 不是多人副本
		RST_LEADER			= -3,	// 不是队长
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nExcelID;
	tty_id_t			nInstanceID;
};

struct STC_GAMECMD_USE_ITEM_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 0,
		RST_ISNULL			= -2,	// 道具不存在或数量不够
		RST_DELETE			= -11,	// 从包裹删除道具失败
		RST_HERO			= -12,	// 武将不存在
		RST_LAST_IN_EFFECT	= -13,	// 上一个道具还在生效,不能使用新道具
		RST_IN_VALOR_WAR	= -14,	// 荣耀之战中不能使用
		RST_USE_IN_COMBAT	= -15,	// 战斗过程中不能使用

		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nType;
	// nType==SYNC_TYPE_HERO，后面跟 HeroDesc
};
struct STC_GAMECMD_SYNC_CHAR_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	// 后面跟 CharDesc
};
struct STC_GAMECMD_SYNC_HERO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	// 后面跟 HeroDesc
};
struct STC_GAMECMD_AUTO_SUPPLY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_GET_EQUIP_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟 EquipDesc
};
struct STC_GAMECMD_GET_GEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟 GemDesc
};
struct STC_GAMECMD_MANUAL_SUPPLY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 0,
		RST_WORLDGOLDMINE	= -3,	// 世界金矿未配置武将
		RST_INSTANCE		= -4,	// 副本不存在
		RST_PLAYER			= -5,	// 玩家不在副本里
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟 InstanceHeroDesc
};
struct STC_GAMECMD_REPLACE_EQUIP_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 1,
		RST_INSERT			= 0,	// 插入装备关联数据失败
		RST_HEROISNULL		= -2,	// 武将不存在
		RST_ITEMISNULL		= -3,	// 道具不存在
		RST_EQUIP			= -4,	// 道具不可装备
		RST_ADDITEM			= -10,	// 装备放回包裹失败
		RST_DELITEM			= -11,	// 道具从包裹删除失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	// 后面跟 HeroDesc
};
struct STC_GAMECMD_GET_WORLDGOLDMINE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	int					nArea;
	// 后面跟 WorldGoldMineDesc
};
struct STC_GAMECMD_CONFIG_WORLDGOLDMINE_HERO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 1,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_ROB_WORLDGOLDMINE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 0,
		RST_HASIT			= -2,	// 已经占领一个了
		RST_ISNULL			= -3,	// 金矿不存在
		RST_SAFETIME		= -4,	// 金矿还处在保护时段
		RST_COMBAT			= -5,	// 发起战斗失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nCombatID;
};
struct STC_GAMECMD_DROP_WORLDGOLDMINE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 1,
		RST_ISNULL			= 0,	// 删除金矿关联数据失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
};
struct STC_GAMECMD_GAIN_WORLDGOLDMINE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nArea;
	int					nClass;
	int					nIdx;
	int					nGold;
};
struct STC_GAMECMD_MY_WORLDGOLDMINE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 1,
		RST_ISNULL			= 0,	// 此刻未占领任何金矿
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nArea;
	int					nClass;
	int					nIdx;
	int					nSafeTime;
	tty_id_t			n1Hero;
	tty_id_t			n2Hero;
	tty_id_t			n3Hero;
	tty_id_t			n4Hero;
	tty_id_t			n5Hero;
};
struct STC_GAMECMD_GET_INSTANCELOOT_ADDITEM_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t			nInstanceID;
	int					nCombatType;
	int					nObjID;
	int					nNum;
	int					nClassID;
	// 后面跟 InstanceLootDesc
};
struct STC_GAMECMD_COMBAT_PROF_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	// 后面跟 CombatProf
};
struct STC_GAMECMD_GET_CITYDEFENSE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			n1Hero;
	tty_id_t			n2Hero;
	tty_id_t			n3Hero;
	tty_id_t			n4Hero;
	tty_id_t			n5Hero;
	int					nAutoSupply;
};
struct STC_GAMECMD_USE_DRUG_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK				= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	// 后面跟 HeroDesc
};
struct STC_GAMECMD_SUPPLY_DRUG_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	int					nNum;
};
struct STC_GAMECMD_PVP_RST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	tty_id_t			nCombatID;				// 战斗ID
	int					nCombatRst;				// 战斗结果
	int					nGold;					// 金币
	int					nMan;					// 人口
};
struct STC_GAMECMD_ARMY_ACCELERATE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		RST_COMBAT		= -2,					// 战斗不存在
		RST_TE			= -3,					// 时间事件不存在
		RST_CRYSTAL		= -4,					// 水晶扣费失败
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nCombatID;				// 
	int					nCostCrystal;
	unsigned char		byType;
};
struct STC_GAMECMD_ARMY_BACK_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		RST_COMBAT		= -2,					// 战斗不存在
		RST_TE			= -3,					// 时间事件不存在
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	tty_id_t			nCombatID;				// 
	int					nBackTime;
};
struct STC_GAMECMD_WORLDCITY_GET_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	int					nRefreshTime;
	int					nBonusTime;
	// 后面跟 WorldCity
};
struct STC_GAMECMD_WORLDCITY_GETLOG_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	int					nMaxPage;
	// 后面跟 WorldCityLog
};
struct STC_GAMECMD_WORLDCITY_GETLOG_ALLIANCE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	int					nMaxPage;
	// 后面跟 WorldCityLogAlliance
};
struct STC_GAMECMD_WORLDCITY_RANK_MAN_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	int					nMaxPage;
	// 后面跟 WorldCityRankMan
};
struct STC_GAMECMD_WORLDCITY_RANK_ALLIANCE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		// 其他错误
		RST_DB_ERR		= -200,
		RST_SQL_ERR		= -201,
	};
	tty_rst_t			nRst;
	int					nNum;
	int					nMaxPage;
	// 后面跟 WorldCityRankAlliance
};


struct STC_GAMECMD_CHAR_IS_ONLINE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	bool				bOnline;
	tty_id_t			nAccountID;
};
struct STC_GAMECMD_CHRISTMAS_TREE_READY_RIPE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int	nBeginTime;		// 有成熟时间事件时会有以下倒计时
	unsigned int	nEndTime;
};
struct STC_GAMECMD_GET_WORLD_AREA_INFO_TERRAIN_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int	nFromX;
	unsigned int	nFromY;
	unsigned int	nToX;
	unsigned int	nToY;
	unsigned int	nNum;
	// 后面跟nNum个TerrainUnit
};
struct STC_GAMECMD_GET_WORLD_AREA_INFO_CITY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int	nFromX;
	unsigned int	nFromY;
	unsigned int	nToX;
	unsigned int	nToY;
	unsigned int	nNum;
	// 后面跟nNum个PlayerCard
};
struct STC_GAMECMD_OPERATE_ADD_ALLIANCE_MAIL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_IN_ALLIANCE		= -1,	// 没有加入联盟

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_TEXT_TOO_LONG		= -220,	// 文本超长
		RST_ALLIANCE_NOT_IN_MEM	= -221,	// 联盟数据没载入内存
	};
	tty_rst_t		nRst;
};
struct STC_GAMECMD_OPERATE_BUY_ITEM_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_NUM_0				= -1,	// 购买数量不能为0
		RST_ITEM_NOT_EXIST		= -2,	// 道具不存在
		RST_CANNOT_USE_CRYSTAL	= -3,	// 该物品不能用水晶购买
		RST_MONEY_NOT_ENOUGH	= -4,	// 金钱不够
		RST_ADD_ITEM_FAIl		= -5,	// 添加道具失败
		RST_ERR_MONEYTYPE		= -10,	// 金钱类型不对

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_TOO_MANY			= -220,	// 一次买入过多
	};
	tty_rst_t		nRst;
	unsigned int	nExcelID;
	unsigned int	nNum;
	unsigned int	nMoneyNum;
	unsigned int	nMoneyType;
	unsigned int	nItemIDNum;
	// 后面跟nItemIDNum个item_id(tty_id_t)
};
struct STC_GAMECMD_OPERATE_SELL_ITEM_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_ITEM_NOT_EXIST		= -1,	// 道具不存在
		RST_TOO_MANY			= -2,	// 数量超过拥有量
		RST_DEL_ITEM_FAIl		= -3,	// 扣除道具失败

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nItemID;
	unsigned int	nExcelID;
	unsigned int	nNum;
	unsigned int	nGold;
};
struct CTS_GAMECMD_OPERATE_CONTRIBUTE_ALLIANCE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nGold;
};
struct CTS_GAMECMD_OPERATE_CONVERT_DIAMOND_GOLD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nDiamond;
};
struct STC_GAMECMD_OPERATE_CONTRIBUTE_ALLIANCE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NUM_0				= -1,	// 不能兑换0贡献度
		RST_NO_ALLIANCE			= -2,	// 不在联盟中
		RST_GOLD_NOT_ENOUGH		= -3,	// 黄金不够 
		RST_P_ADD_FAIL			= -4,	// 个人贡献度添加失败
		RST_A_ADD_FAIL			= -5,	// 联盟发展度添加失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nGold;
	unsigned int	nDevelopment;	// 贡献度 
};
struct STC_GAMECMD_OPERATE_CONVERT_DIAMOND_GOLD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_DIAMOND_0			= -1,	// 兑换的钻石为0
		RST_DIAMOND_NOT_ENOUGH	= -2,	// 钻石不够

		// 其他返回值
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nDiamond;
	unsigned int	nGold;
};
struct CTS_GAMECMD_OPERATE_JOIN_ALLI_NAME_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	char			szAllianceName[TTY_ALLIANCENAME_LEN];
};
struct CTS_GAMECMD_GET_MY_ALLIANCE_JOIN_EVENT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{

};
struct STC_GAMECMD_OPERATE_JOIN_ALLI_NAME_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_ALLI				= -1,		// 联盟不存在
		RST_ALREADY_ALLI		= -2,		// 已经有联盟了
		RST_ALREADY_APPLY		= -3,		// 已经申请过了
		RST_ADD_EVENT			= -4,		// 插入申请事件出错
		RST_ALLI_FULL			= -5,		// 成员已满

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nAllianceID;
	char			szAllianceName[TTY_ALLIANCENAME_LEN];
};
struct STC_GAMECMD_GET_MY_ALLIANCE_JOIN_EVENT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_EVENT			= -1,		// 没有申请事件

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nAllianceID;
	char			szAllianceName[TTY_ALLIANCENAME_LEN];
};
struct STC_GAMECMD_IN_ALLIANCE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	tty_id_t		nAllianceID;
};
struct CTS_GAMECMD_GET_ALLIANCE_CARD_BY_ID_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nAllianceID;
};
struct CTS_GAMECMD_GET_ALLIANCE_CARD_BY_RANK_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nFromRank;
	unsigned int	nToRank;
};
struct STC_GAMECMD_GET_ALLIANCE_CARD_BY_ID_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		RST_NOT_EXIST	= -1,
	};
	tty_rst_t		nRst;
	//AllianceCard	card;
};
struct STC_GAMECMD_GET_ALLIANCE_CARD_BY_RANK_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	unsigned int	nTotalNum;
	unsigned int	nNum;
	// nNum个card
};
struct CTS_GAMECMD_OPERATE_SET_ALLI_INTRO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nLen;
	char			szIntroduction[1];
};
struct STC_GAMECMD_OPERATE_SET_ALLI_INTRO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,
		RST_NO_ALLI		= -1,	// 没有联盟
		RST_NO_RIGHT	= -2,	// 权限不够

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_INTRO_TOO_LONG	= -220,	// 简介太长
	};
	tty_rst_t		nRst;
};
// 抽奖
struct CTS_GAMECMD_OPERATE_DRAW_LOTTERY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct STC_GAMECMD_OPERATE_DRAW_LOTTERY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK			= 0,
	};
	tty_rst_t		nRst;
	unsigned int	nType;
	unsigned int	nPrice;
	unsigned int	nChoice;
	int				nNum;
	// 后面跟nNum个LotteryEntry
};
// 获取金矿信息
struct CTS_GAMECMD_GET_OTHER_GOLDORE_INFO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nAccountID;
};
struct STC_GAMECMD_GET_OTHER_GOLDORE_INFO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	struct GoldoreInfo 
	{
		enum
		{
			state_none			= 0,
			state_producing		= 1,	// 生产中，倒计时中
			state_can_fetch		= 2,	// 可以摘取
		};
		unsigned int	nAutoID;
		unsigned int	nLevel;
		unsigned int	nCountDownTime;
		unsigned int	nState;
	};
	struct ChristmasTreeInfo 
	{
		enum
		{
			state_none			= 0,	
			state_ripe			= 1,	// 已经成熟可收获
			state_can_watering	= 2,	// 可以浇水
			state_ready_ripe	= 3,	// 准备成熟，开始成熟倒计时，已经浇满水了
		};
		unsigned char	nState;
		unsigned int	nCountDownTime;	// 有成熟时间事件时间倒计时 
		unsigned int	nWateredNum;	// 已浇水次数 
		bool			bICanWater;		// 我是否可以浇水 
	};
	enum
	{
		RST_OK			= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nAccountID;
	unsigned int	nCharLevel;
	unsigned int	nCharHeadID;
	ChristmasTreeInfo	christmasTreeInfo;
	int				nNum;
	// 后面跟nNum个GoldoreInfo
};
/*
struct STC_GAMECMD_GET_OTHER_GOLDORE_POSITION_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	struct GoldorePositionUnit 
	{
		unsigned int	nAutoID;
		unsigned int	nLevel;
	};
	enum
	{
		RST_OK			= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nAccountID;
	int				nNum;
	// 后面跟n个GoldorePositionUnit
};
struct STC_GAMECMD_GET_OTHER_GOLDORE_PRODUCTION_EVENT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	struct GoldoreProductionEvent 
	{
		unsigned int	nAutoID;
		unsigned int	nProduction;
	};
	enum
	{
		RST_OK			= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nAccountID;
	int				nNum;
	// 后面跟n个GoldoreProductionEvent
};
struct STC_GAMECMD_GET_OTHER_GOLDORE_PRODUCTION_TE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	struct GoldoreProductionTimeEvent 
	{
		unsigned int	nAutoID;
		unsigned int	nBeginTime;
		unsigned int	nEndTime;
	};
	enum
	{
		RST_OK			= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nAccountID;
	int				nNum;
	// 后面跟n个GoldoreProductionTimeEvent
};
struct STC_GAMECMD_GET_OTHER_GOLDORE_FETCH_INFO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	struct FetchUnit
	{
		unsigned int	nAutoID;
		bool			bCanFetch;
	};
	enum
	{
		RST_OK			= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nAccountID;
	int				nNum;
	// 后面跟n个FetchUnit
};
struct STC_GAMECMD_GET_OTHER_CHRISTMAS_TREE_INFO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	enum
	{
		state_none			= 0,	
		state_ripe			= 1,	// 已经成熟可收获
		state_can_watering	= 2,	// 可以浇水
		state_ready_ripe	= 3,	// 准备成熟，开始成熟倒计时，已经浇满水了
	};
	tty_rst_t		nRst;
	tty_id_t		nAccountID;
	unsigned char	nState;
	unsigned int	nCountDownTime;	// 有成熟时间事件时间倒计时
	unsigned int	nWateredNum;	// 已浇水次数 
	bool			bICanWater;		// 我是否可以浇水 
};
*/
struct CTS_GAMECMD_OPERATE_CHECK_DRAW_LOTTERY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nType;			// 见money_type_xxx,支持none,diamond,crystal
};
struct STC_GAMECMD_OPERATE_CHECK_DRAW_LOTTERY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_NO_FREE				= -1,			// 免费抽奖次数已经用完
		RST_NO_DIAMOND			= -2,			// 钻石不够
		RST_NO_CRYSTAL			= -3,			// 水晶不够
		RST_ALLIANCE_DEV_NOT_ENOUGH	= -4,		// 联盟贡献度不够 
		RST_NO_ALLIANCE			= -5,			// 没有联盟
		RST_ALLIANCE_DRAW_LOTTERY_NUM_0	= -6,	// 联盟抽奖次数为0
		RST_ERR_TYPE			= -10,			// 抽奖类型不对

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nType;
	unsigned int	nPrice;			// money_type_none,price为0
};
struct CTS_GAMECMD_OPERATE_FETCH_LOTTERY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nMoneyType;		// 本身没有什么意义,只是告诉客户端发来的返回值,不然不知道是哪个转盘发来的请求,返回时自然也不知道返回给哪个转盘响应
};
struct STC_GAMECMD_OPERATE_FETCH_LOTTERY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_ADD_ITEM_FAIL		= -1,		// 添加道具失败
		RST_ERR_TYPE			= -2,		// 抽奖类型不对

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_NO_LOTTERY			= -220,		// 没有抽奖
	};
	tty_rst_t		nRst;
	unsigned int	nType;
	unsigned int	nData;
	tty_id_t		nItemID;
	unsigned int	nMoneyType;
};
struct CTS_GAMECMD_GET_CHRISTMAS_TREE_INFO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{

};
struct STC_GAMECMD_GET_CHRISTMAS_TREE_INFO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK			= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	enum
	{
		state_none			= 0,	
		state_ripe			= 1,	// 已经成熟可收获
		state_can_watering	= 2,	// 可以浇水
		state_ready_ripe	= 3,	// 准备成熟，开始成熟倒计时，已经浇满水了
	};
	tty_rst_t		nRst;
	unsigned char	nState;
	unsigned int	nCountDownTime;	// 有成熟时间事件时间倒计时
	unsigned int	nCanWaterCountDownTime;	// 能够浇水的时间事件倒计时
	unsigned int	nWateredNum;	// 已浇水次数 
	bool			bICanWater;		// 我是否可以浇水 
};
struct CTS_GAMECMD_GET_GOLDORE_SMP_INFO_ALL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	enum
	{
		max_num		= 400,	// nNum不能超过max_num
	};
	int				nNum;
	// 后面跟nNum个account_id
};
struct STC_GAMECMD_GET_GOLDORE_SMP_INFO_ALL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_TOO_MANY			= -220,		// 传来的id太多了
		RST_NEGTIVE_0_NUM		= -221,		// 数量为<=0
	};
	tty_rst_t		nRst;
	int				nNum;
	// 后面跟nNum个GoldoreSmpInfo
};
struct CTS_GAMECMD_GET_ALLIANCE_TRADE_INFO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{

};
struct CTS_GAMECMD_OPERATE_ALLIANCE_TRADE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{

};
struct STC_GAMECMD_GET_ALLIANCE_TRADE_INFO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,		// 存在
		RST_NO_ALLIANCE			= -1,		// 没有联盟
		RST_NO_EMBASSY			= -2,		// 没有大使馆
		RST_NO_CONGRESS			= -3,		// 没有联盟议会

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nCountDownTime;
	unsigned int	nGold;
	unsigned int	nTradeNum;
	unsigned int	nExcelTradeNum;
	unsigned int	nExcelTradeTime;
	unsigned int	nExcelTradeGold;
};
struct STC_GAMECMD_OPERATE_ALLIANCE_TRADE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,		// 存在
		RST_NO_ALLIANCE			= -1,		// 联盟不存在
		RST_TRADE_NUM_0			= -2,		// 跑商次数为0
		RST_NO_EMBASSY			= -3,		// 没有大使馆
		RST_NO_ALLI_CONGRESS	= -4,		// 没有联盟议会
		RST_TRADE_NOT_END		= -5,		// 已经在跑商了
		RST_TE_DATA_ADD_FAIL	= -6,		// 时间事件数据插入失败
		RST_TE_ADD_FAIL			= -7,		// 时间事件插入失败

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nCountDownTime;
	unsigned int	nGold;
};
struct CTS_GAMECMD_GET_ENEMY_LIST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct CTS_GAMECMD_OPERATE_DELETE_ENEMY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nEnemyID;
};
struct STC_GAMECMD_GET_ENEMY_LIST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nNum;
	// 后面跟nNum个EnemyUnit
};
struct STC_GAMECMD_OPERATE_DELETE_ENEMY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nEnemyID;
};
struct STC_GAMECMD_NEW_ENEMY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	EnemyUnit		enemy;
};
struct STC_GAMECMD_NEW_NOTIFICATION_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
};
struct CTS_GAMECMD_GET_RANK_LIST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nType;
	unsigned int	nFrom;
	unsigned int	nNum;
};
struct CTS_GAMECMD_GET_MY_RANK_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nType;
};
struct STC_GAMECMD_GET_RANK_LIST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	unsigned int	nType;
	unsigned int	nMyRank;
	unsigned int	nTotalNum;
	int				nNum;
	// 后面跟nNum个CharRankInfo
};
struct STC_GAMECMD_GET_MY_RANK_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	unsigned int	nType;
	unsigned int	nRank;
	unsigned int	nTotalNum;
};
struct STC_GAMECMD_RECHARGE_DIAMOND_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int	nAddedDiamond;
	unsigned int	nGiftDiamond;		// 充值附赠的钻石(增加nDiamond,不增加nTotalDiamond)
	unsigned int	nVip;
};
struct CTS_GAMECMD_OPERATE_WRITE_SIGNATURE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	char			szSignature[TTY_CHARACTER_SIGNATURE_LEN];
};
struct STC_GAMECMD_OPERATE_WRITE_SIGNATURE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		// 
		RST_TOO_LONG			= -220,	// 签名太长
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_GET_IMPORTANT_CHAR_ATB_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct STC_GAMECMD_GET_IMPORTANT_CHAR_ATB_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	unsigned int	nExp;
	unsigned int	nDiamond;
	unsigned int	nCrystal;
	unsigned int	nDevelopment;
	unsigned int	nGold;
	unsigned int	nPopulation;
	unsigned int	nLevel;
	unsigned int	nProtectTime;							// 保护期剩余时间
	unsigned int	nAddBuildNumTime;						// 工匠之书剩余时间
	unsigned int	nTotalBuildNum;							// 总共的建筑队列
	unsigned int	nCup;
};
struct CTS_GAMECMD_OPERATE_CHANGE_NAME_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	char			szNewName[TTY_CHARACTERNAME_LEN];
};
struct STC_GAMECMD_OPERATE_CHANGE_NAME_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_NAME_DUP			= -1,	// 名字重复
		RST_DIAMOND_NOT_ENOUGH	= -2,	// 钻石不够

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_NAME_INVALID		= -220,	// 名字有非法字符
	};
	tty_rst_t		nRst;
	unsigned int	nDiamond;
};
struct CTS_GAMECMD_OPERATE_MOVE_CITY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nPosX;
	unsigned int	nPosY;
};
struct STC_GAMECMD_OPERATE_MOVE_CITY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_ALREADY_PLAYER		= -1,	// 已经有人
		RST_NO_ITEM				= -2,	// 没有迁城卷轴
		RST_DEL_ITEM_FAIL		= -3,	// 删除道具失败
		RST_CHG_POSITION_FAIL	= -4,	// 更新坐标失败

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_ALREADY_BOOKED		= -220,	// 已经有其他人往这个位置迁移(暂废弃)
		RST_CANNOT_BUILD_CITY	= -221,	// 这个地方不能建城(暂废弃)
		RST_INVALID_POSITION	= -222,	// 超出地图范围的位置(暂废弃)
		RST_CANNOT_MOVE_CITY	= -223,	// 这个位置不能迁城
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_GET_PAY_SERIAL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{

};
struct STC_GAMECMD_GET_PAY_SERIAL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	char			szPaySerial[TTY_PAY_SERIAL_LEN];
};
struct CTS_GAMECMD_OPERATE_READ_NOTIFICATION_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nNotificationID;
};
struct STC_GAMECMD_OPERATE_READ_NOTIFICATION_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_OPERATE_CHANGE_HERO_NAME_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nHeroID;
	char			szNewName[TTY_CHARACTERNAME_LEN];
};
struct STC_GAMECMD_OPERATE_CHANGE_HERO_NAME_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_HERO				= -1,			// 英雄不存在
		RST_NO_DIAMOND			= -2,			// 钻石不够
		RST_NAME_INVALID		= -120,			// 名字非法

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nDiamond;
};
struct CTS_GAMECMD_READ_MAIL_ALL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nMailType;
};
struct CTS_GAMECMD_DELETE_MAIL_ALL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nMailType;
};
struct STC_GAMECMD_READ_MAIL_ALL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_ERR_TYPE			= -1,		// 类型不对

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nMailType;
};
struct STC_GAMECMD_DELETE_MAIL_ALL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_ERR_TYPE			= -1,		// 类型不对

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nMailType;
};
struct CTS_GAMECMD_OPERATE_ADD_GM_MAIL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nLength;
	// char数组,长nLength
};
struct STC_GAMECMD_OPERATE_ADD_GM_MAIL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_TEXT_TOO_LONG		= -220,		// 文本太长
	};
	tty_rst_t		nRst;
};
struct STC_GAMECMD_EXPELED_ALLI_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{

};
struct STC_GAMECMD_NEW_ALLIANCE_POSITION_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int	nPosition;
};
struct CTS_GAMECMD_OPERATE_SET_ALLI_NAME_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	char			szName[TTY_ALLIANCENAME_LEN];
};
struct STC_GAMECMD_OPERATE_SET_ALLI_NAME_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_ALLI				= -1,			// 没有联盟
		RST_NOT_LEADER			= -2,			// 只有盟主才能改名
		RST_DIAMOND_NOT_ENOUGH	= -3,			// 钻石不足

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nDiamond;					// 扣掉的钻石
};
struct CTS_GAMECMD_GET_WORLD_FAMOUS_CITY_LIST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{

};
struct STC_GAMECMD_GET_WORLD_FAMOUS_CITY_LIST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	struct FamousCityUnit 
	{
		unsigned int	nType;
		unsigned int	nPosX;
		unsigned int	nPosY;
	};
	unsigned int	nNum;
	// nNum个FamousCityUnit
};
struct CTS_GAMECMD_OPERATE_FETCH_MAIL_REWARD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int		nMailID;
};
struct STC_GAMECMD_OPERATE_FETCH_MAIL_REWARD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_MAIL_ERR			= -1,		// 邮件类型不对,(邮件不存在或者标识不对)
		RST_REWARD_STR_ERR		= -2,		// 奖励发放的字符串不对
		RST_ADD_ITEM_ERR		= -10,		// 添加道具失败
		RST_ADD_DIAMOND_ERR		= -20,		// 添加钻石失败
		RST_ADD_CRYSTAL_ERR		= -30,		// 添加水晶失败
		RST_ADD_GOLD_ERR		= -40,		// 添加黄金失败

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	struct RewardUnit 
	{
		unsigned int	nType;
		unsigned int	nNum;
		unsigned int	nData;				// 道具的excel_id
		tty_id_t		nID;				// 道具的only_id

		RewardUnit()
		{
			WHMEMSET0THIS();
		}
	};
	tty_rst_t			nRst;
	unsigned int		nMailID;
	unsigned int		nNum;
	// nNum个RewardUnit
};
struct CTS_GAMECMD_OPERATE_UPLOAD_BILL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int		nClientTime;
	int					nTextLen;
	char				szText[1];
};
struct STC_GAMECMD_OPERATE_UPLOAD_BILL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_INSERT_FAIL			= -1,		// 插入失败

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_TEXT_TOO_LONG		= -220,		// 账单字串太长
	};
	tty_rst_t			nRst;
};
struct CTS_GAMECMD_OPERATE_REGISTER_ACCOUNT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	char		szAccount[TTY_ACCOUNTNAME_LEN];
	int			nPassLen;
	//char		szPass[nPassLen];
	// 1.修改密码则后面跟着老密码串
	// 2.注册则将nOldPassLen设置为0
	//int		nOldPassLen;
	//char		szOldPass[nOldPassLen];
};
struct CTS_GAMECMD_OPERATE_BIND_DEVICE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	char		szDeviceID[TTY_DEVICE_ID_LEN];
};
struct STC_GAMECMD_OPERATE_REGISTER_ACCOUNT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_EXIST			= -1,		// 账号不存在
		RST_OLD_PASS_ERR		= -10,		// 老密码错误
		RST_NAME_DUP			= -20,		// 名字已经存在
		RST_REGISTER_FAIL		= -21,		// 注册失败

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_PASS_TOO_LONG		= -220,		// 密码太长
		RST_PASS_INVALID_LEN	= -221,		// 密码长度不合法
		RST_CONNECT_GS_FAIL		= -222,		// 和全局服断连
		RST_INVALID_NAME		= -223,		// 非法的名字
	};
	tty_rst_t	nRst;
};
struct STC_GAMECMD_OPERATE_BIND_DEVICE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_BIND_FAIL			= -1,		// 绑定失败
		RST_BINDED_IN_GROUP		= -2,		// 已经在该大区绑定过了

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_CONNECT_GS_FAIL		= -220,		// 和全局服断连
	};
	tty_rst_t	nRst;
};

struct CTS_GAMECMD_GET_SERVER_TIME_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{

};
struct STC_GAMECMD_GET_SERVER_TIME_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int	nTimeNow;
};
struct STC_GAMECMD_ADCOLONY_AWARD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int	nMoneyType;
	unsigned int	nMoneyNum;
};
struct CTS_GAMECMD_OPERATE_DISMISS_SOLDIER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nExcelID;
	unsigned int	nLevel;
	unsigned int	nNum;
};
struct STC_GAMECMD_OPERATE_DISMISS_SOLDIER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_NUM_NOT_ENOUGH		= -1,			// 兵种数量不够
		RST_DEL_ERR				= -2,			// 删除士兵失败
		RST_ADD_POP_ERR			= -3,			// 增加人口失败

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nExcelID;
	unsigned int	nLevel;
	unsigned int	nNum;
};
//////////////////////////////////////////////////////////////////////////
struct CTS_GAMECMD_OPERATE_ALLI_DONATE_SOLDIER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nObjID;
	unsigned int	nExcelID;
	unsigned int	nLevel;
	unsigned int	nNum;
};
struct CTS_GAMECMD_OPERATE_ALLI_RECALL_SOLDIER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nEventID;
};
struct CTS_GAMECMD_OPERATE_ALLI_ACCE_SOLDIER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t		nEventID;
	unsigned int	nTime;
	unsigned int	nMoneyType;
};
struct CTS_GAMECMD_GET_DONATE_SOLDIER_QUEUE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{

};
struct CTS_GAMECMD_GET_LEFT_DONATE_SOLDIER_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{

};
//
struct STC_GAMECMD_OPERATE_ALLI_DONATE_SOLDIER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_QUEUE_FULL			= -1,		// 派遣队列已满(一次只能一个)
		RST_NO_ALLI				= -2,		// 没有联盟
		RST_NOT_ONE_ALLI		= -3,		// 和目标不在同一个联盟
		RST_LEVEL_ERR			= -4,		// 等级不够
		RST_SOLDIER_NOT_ENOUGH	= -5,		// 士兵不够
		RST_TODAY_FULL			= -6,		// 今日派遣已满
		RST_TE_DATA_ERR			= -10,		// 时间事件数据插入失败
		RST_TE_TIME_ERR			= -11,		// 时间事件时间事件插入失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nObjID;
	unsigned int	nExcelID;
	unsigned int	nLevel;
	unsigned int	nNum;
	unsigned int	nTime;
	tty_id_t		nEventID;
};
struct STC_GAMECMD_OPERATE_ALLI_RECALL_SOLDIER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_NO_EVENT			= -1,		// 事件不存在
		RST_NO_TE				= -2,		// 事件不存在
		RST_CANNOT_RECALL		= -3,		// 最后5s无法召回
		RST_NEW_TE_ERR			= -4,		// 插入新事件失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nOldEventID;
	tty_id_t		nNewEventID;
	unsigned int	nTime;
};
struct STC_GAMECMD_OPERATE_ALLI_ACCE_SOLDIER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_NO_EVENT			= -1,		// 事件不存在
		RST_DIAMOND_NOT_ENOUGH	= -2,		// 钻石不够
		RST_CRYSTAL_NOT_ENOUGH	= -3,		// 水晶不够
		RST_ERR_MONEY_TYPE		= -10,		// 货币类型不对

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nEventID;
	unsigned int	nMoneyType;
	unsigned int	nMoney;
	unsigned int	nTime;
};
struct STC_GAMECMD_GET_DONATE_SOLDIER_QUEUE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	struct UNIT_T 
	{
		unsigned int	nDstType;			// 目标类型(1为自己派遣士兵,2为别人派遣士兵给自己)
		tty_id_t		nPeerID;
		unsigned int	nExcelID;
		unsigned int	nLevel;
		unsigned int	nNum;
		unsigned int	nType;				// 1为出征,2为召回
		tty_id_t		nEventID;
		unsigned int	nTime;
		char			szCharName[TTY_CHARACTERNAME_LEN];
	};
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nNum;
};
struct STC_GAMECMD_DONATE_SOLDIER_TE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	tty_id_t			nEventID;
	unsigned int		nExcelID;
	unsigned int		nLevel;
	unsigned int		nNum;
	unsigned int		nType;
};
struct STC_GAMECMD_GET_LEFT_DONATE_SOLDIER_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nLeftNum;
	unsigned int		nMaxNum;
};

struct GoldMarketDeal_T 
{
	tty_id_t			nTransactionID;
	unsigned int		nGold;
	unsigned int		nPrice;
	unsigned int		nTotalPrice;
	tty_id_t			nAccountID;
};
struct CTS_GAMECMD_GET_GOLD_DEAL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int		nPage;
	unsigned int		nPageSize;
};
struct CTS_GAMECMD_GET_SELF_GOLD_DEAL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
};
struct CTS_GAMECMD_OPERATE_ADD_GOLD_DEAL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int		nGold;
	unsigned int		nPrice;			// 单价
};
struct CTS_GAMECMD_OPERATE_BUY_GOLD_IN_MARKET_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t			nTransactionID;
	unsigned int		nMoneyType;
};
struct CTS_GAMECMD_OPERATE_CANCEL_GOLD_DEAL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	tty_id_t			nTransactionID;
};
struct STC_GAMECMD_GET_GOLD_DEAL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nPage;
	unsigned int		nTotalNum;
	unsigned int		nNum;
	// 后面跟nNum个GoldMarketDeal_T
};
struct STC_GAMECMD_GET_SELF_GOLD_DEAL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nNum;
	// 后面跟nNum个GoldMarketDeal_T
};
struct STC_GAMECMD_OPERATE_ADD_GOLD_DEAL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_TOO_MANY			= -1,	// 交易太多,一次只能一笔
		RST_LEVEL_LOW			= -2,	// 等级太低
		RST_GOLD_NOT_ENOUGH		= -3,	// 黄金不够
		RST_ADD_DEAL_ERR		= -4,	// 添加交易失败
		RST_GOLD_0				= -10,	// 黄金出售0
		RST_GOLD_OVER_LEVEL		= -11,	// 黄金超过当前等级一次性交易量

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nGold;
	tty_id_t			nTransactionID;
};
struct STC_GAMECMD_OPERATE_BUY_GOLD_IN_MARKET_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_DEAL_NOT_EXISTS		= -1,		// 交易不存在
		RST_CANNOT_BUY_SELF		= -2,		// 不能自买自卖
		RST_LEVEL_TOO_LOW		= -3,		// 等级太低
		RST_DEAL_DEL_ERR		= -4,		// 删除交易失败
		RST_DEL_MONEY_ERR		= -5,		// 扣款失败
		RST_ADD_BUYER_MAIL_ERR	= -6,		// 发送买方邮件失败
		RST_ADD_SELLER_MAIL_ERR	= -7,		// 发送卖方邮件失败
		RST_ADD_SELLER_CRYSTAL	= -8,		// 增加卖方水晶失败
		RST_DIAMOND_NOT_ENOUGH	= -10,		// 钻石不够
		RST_CRYSTAL_NOT_ENOUGH	= -11,		// 水晶不够
		RST_MONEY_TYPE_ERR		= -20,		// 货币类型不对

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nMoneyType;
	unsigned int		nTotalPrice;
	unsigned int		nGold;
};
struct STC_GAMECMD_OPERATE_CANCEL_GOLD_DEAL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_DEAL_NOT_EXISTS		= -1,		// 交易不存在
		RST_CANCEL_INTERVAL		= -2,		// 取消交易时间太短
		RST_ADD_GOLD_FAIL		= -3,		// 增加黄金失败

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t			nRst;
	unsigned int		nGold;
};
struct STC_GAMECMD_GET_WORLD_RES_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int	nFromX;
	unsigned int	nFromY;
	unsigned int	nToX;
	unsigned int	nToY;
	unsigned int	nNum;
	// 后面跟nNum个WorldResSimpleInfo
};
struct CTS_GAMECMD_GET_WORLD_RES_CARD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nID;
};
struct STC_GAMECMD_GET_WORLD_RES_CARD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK				= 0,
		RST_NOT_EXIST		= -1,		// 不存在
	};
	tty_rst_t		nRst;
	WorldRes2Client	res;
};
struct STC_GAMECMD_WORLD_RES_CLEAR_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	unsigned int	nPosX;
	unsigned int	nPosY;
};

//////////////////////////////////////////////////////////////////////////
// 联盟副本相关
//////////////////////////////////////////////////////////////////////////
struct CTS_GAMECMD_ALLI_INSTANCE_CREATE_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct STC_GAMECMD_ALLI_INSTANCE_CREATE_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_ALLI				= -1,		// 自己没有联盟
		RST_ADD_INSTANCE_ERR	= -2,		// 添加副本出错
		RST_SET_STATUS			= -3,		// 修改自己状态出错
		RST_EXISTS_INSTANCE		= -1001,	// 有副本未退出
		RST_NO_INSTANCE_EXCEL	= -1002,	// excel中未配置该副本
		RST_LEVEL_LOW			= -1003,	// 等级太低
		RST_NOT_IN_TIME			= -1004,	// 不在开放时间段
		RST_NO_TIMES_LEFT		= -1005,	// 没有可用次数了
		RST_NO_INSTANCE			= -1010,	// 副本不存在
		RST_TEAM_FULL			= -1011,	// 队伍已满
		RST_INSTANCE_START		= -1012,	// 副本已经开始了

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nInstanceID;
};
struct CTS_GAMECMD_ALLI_INSTANCE_JOIN_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nInstanceID;
};
struct STC_GAMECMD_ALLI_INSTANCE_JOIN_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_ALLI_INSTANCE	= -1,		// 副本不存在
		RST_NOT_SAME_ALLI		= -2,		// 不是同一个联盟
		RST_ROOM_FULL			= -3,		// 队伍已满
		RST_CHANGE_INFO_FAIL	= -4,		// 修改信息未成功
		RST_EXISTS_INSTANCE		= -1001,	// 有副本未退出
		RST_NO_INSTANCE_EXCEL	= -1002,	// excel中未配置该副本
		RST_LEVEL_LOW			= -1003,	// 等级太低
		RST_NOT_IN_TIME			= -1004,	// 不在开放时间段
		RST_NO_TIMES_LEFT		= -1005,	// 没有可用次数了
		RST_NO_INSTANCE			= -1010,	// 副本不存在
		RST_TEAM_FULL			= -1011,	// 队伍已满
		RST_INSTANCE_START		= -1012,	// 副本已经开始了

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_ALLI_INSTANCE_EXIT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nInstanceID;
};
struct STC_GAMECMD_ALLI_INSTANCE_EXIT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_INSTANCE			= -1,		// 副本不存在
		RST_COMBAT				= -2,		// 战斗中
		RST_UNLOCK_ERR			= -3,		// 将领解锁失败
		RST_CHANGE_CHAR_INFO	= -4,		// 修改玩家状态失败
		RST_CHANGE_INST_INFO	= -5,		// 修改副本失败
		RST_DESTROY_INSTANCE	= -6,		// 销毁副本失败
		RST_CHANGE_LEADER		= -7,		// 转让队长失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_ALLI_INSTANCE_KICK_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nInstanceID;
	tty_id_t		nObjID;
};
struct STC_GAMECMD_ALLI_INSTANCE_KICK_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_LEADER			= -1,		// 不是队长
		RST_COMBAT				= -2,		// 战斗中不能踢人
		RST_EXIT_INSTANCE		= -3,		// 退出副本失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	tty_id_t		nObjID;
};
struct CTS_GAMECMD_ALLI_INSTANCE_DESTROY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nInstanceID;
};
struct STC_GAMECMD_ALLI_INSTANCE_DESTROY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_COMBAT				= -1,		// 战斗中
		RST_NOT_LEADER			= -2,		// 不是队长
		RST_EXIT_ERR			= -3,		// 退出副本失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_ALLI_INSTANCE_CONFIG_HERO_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nInstanceID;
	tty_id_t		n1HeroID;
	tty_id_t		n2HeroID;
	tty_id_t		n3HeroID;
	tty_id_t		n4HeroID;
	tty_id_t		n5HeroID;		
};
struct STC_GAMECMD_ALLI_INSTANCE_CONFIG_HERO_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_HERO_NOT_SELF		= -1,		// 英雄不是自己的
		RST_NO_IDLE				= -2,		// 副本不是空闲状态
		RST_NOT_IN_ISNTANCE		= -3,		// 不在副本中
		RST_UNLOCK_HERO_FAIL	= -4,		// 解锁英雄失败
		RST_LOCK_HERO_FAIL		= -5,		// 锁定英雄失败
		RST_DEPLOY_HERO			= -6,		// 配置武将失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_ALLI_INSTANCE_START_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nInstanceID;
};
struct STC_GAMECMD_ALLI_INSTANCE_START_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_LEADER			= -1,		// 不是队长
		RST_NOT_READY			= -2,		// 有人未就绪
		RST_NO_PLAYER			= -3,		// 没人也不能开始
		RST_SET_STAUTS			= -4,		// 修改副本状态失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_ALLI_INSTANCE_READY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nInstanceID;
	bool			bReady;
};
struct STC_GAMECMD_ALLI_INSTANCE_READY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_INSTANCE			= -1,		// 副本不存在
		RST_NO_HERO				= -2,		// 没有配置将领
		RST_SET_INFO_FAIL		= -3,		// 设置状态失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_ALLI_INSTANCE_GET_LIST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
};
struct STC_GAMECMD_ALLI_INSTANCE_GET_LIST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	struct ROOM_T 
	{
		tty_id_t		nInstanceID;
		unsigned int	nPlayerNum;
		tty_id_t		nCreatorID;
		char			szCreatorName[TTY_CHARACTERNAME_LEN];
		unsigned int	nLevel;
		unsigned int	nHeadID;
	};
	tty_rst_t		nRst;
	int				nNum;
};
struct CTS_GAMECMD_ALLI_INSTANCE_GET_CHAR_DATA_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nInstanceID;
};
struct STC_GAMECMD_ALLI_INSTANCE_GET_CHAR_DATA_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	struct CharData 
	{
		unsigned int	nStatus;
		tty_id_t		nAccountID;
		char			szName[TTY_CHARACTERNAME_LEN];
		unsigned int	nLevel;
		unsigned int	nHeadID;
	};
	tty_rst_t		nRst;
	tty_id_t		nInstanceID;
	int				nNum;
};
struct CTS_GAMECMD_ALLI_INSTANCE_GET_HERO_DATA_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nInstanceID;
};
struct STC_GAMECMD_ALLI_INSTANCE_GET_HERO_DATA_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	struct HeroData 
	{
		tty_id_t		nHeroID;
		char			szHeroName[TTY_CHARACTERNAME_LEN];
		tty_id_t		nAccountID;
		unsigned int	nLevel;
		unsigned int	nHealth;
		unsigned int	nProf;
		unsigned int	nArmyType;
		unsigned int	nArmyLevel;
		unsigned int	nArmyNum;
		unsigned int	nRow;
		unsigned int	nCol;
		unsigned int	nHeadID;
	};
	tty_rst_t		nRst;
	tty_id_t		nInstanceID;
	unsigned int	nNum;
};
struct CTS_GAMECMD_ALLI_INSTANCE_GET_STATUS_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nCombatType;
};
struct STC_GAMECMD_ALLI_INSTANCE_GET_STATUS_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nTotalFreeTimes;
	unsigned int	nUsedFreeTimes;
	tty_id_t		nInstanceID;
	unsigned int	nCharStatus;				// instance_player_status_xxx
	unsigned int	nInstanceStatus;			// instance_status_xxx
	unsigned int	nCurLevel;
	bool			bAutoCombat;
	bool			bAutoSupply;
	unsigned int	nRetryTimes;
	tty_id_t		nCreatorID;
	unsigned int	nStopLevel;
	unsigned int	nMaxLevel;
	unsigned int	nCombatType;
	unsigned int	nLastCombatResult;
};
struct CTS_GAMECMD_ALLI_INSTANCE_SAVE_HERO_DEPLOY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int		nSize;
	// nSize/sizeof(HeroDeploy)个HeroDeploy
};
struct STC_GAMECMD_ALLI_INSTANCE_SAVE_HERO_DEPLOY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_LEADER			= -1,		// 不是队长
		RST_INSTANCE_EMPTY		= -2,		// 副本为空
		RST_CHECK_HERO_FAIL0	= -3,		// 英雄数据错误
		RST_CHECK_HERO_FAIL1	= -10,		// 英雄数据错误
		RST_CHECK_HERO_FAIL2	= -11,		// 英雄数据错误

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_ERR_DEPLOY			= -220,		// 错误的布局
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_ALLI_INSTANCE_GET_LOOT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	tty_id_t		nInstanceID;
};
struct STC_GAMECMD_ALLI_INSTANCE_GET_LOOT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	struct LootUnit 
	{
		unsigned int	nExcelID;
		unsigned int	nNum;
	};
	enum
	{
		RST_OK					= 0,

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	int				nNum;
	// nNum*LootUnit
};
struct CTS_GAMECMD_ALLI_INSTANCE_START_COMBAT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	bool				bAutoCombat;
	bool				bAutoSupply;
	unsigned int		nStopLevel;
	tty_id_t			nObjID;				// 目标ID
	unsigned int		nCombatType;		// 战斗类型
	unsigned int		nSize;				// nNum=nSize/sizeof(HeroDeploy)
};
struct STC_GAMECMD_ALLI_INSTANCE_START_COMBAT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,
		RST_NO_HERO				= -1,		// 必须配置将领才能出征
		RST_NO_INSTANCE			= -2,		// 副本不存在
		RST_CANNOT_FIGHT		= -3,		// 不能开战(不是队长,或者还处于战斗中)
		RST_NO_OBJ				= -4,		// 目标不存在
		RST_SAVE_HERO_DEPLOY	= -5,		// 保存将领布局失败
		RST_ADD_TE_ERR			= -10,		// 添加时间事件失败
		RST_ARENA_NEED_UPLOAD	= -14,		// 竞技场必须先上传数据
		RST_ARENA_RANK_LOW		= -15,		// 排名比自己低
		RST_ARENA_RANK_HIGH		= -16,		// 排名比自己高太多
		RST_ARENA_NO_TRIES		= -17,		// 可用次数已经用光
		RST_ERR_COMBAT_TYPE		= -20,		// 战斗类型不对
		RST_CHECK_HERO_FAIL		= -30,		// 校验英雄失败

		// 存储过程执行失败
		RST_DB_EXE_ERR			= -100,		// 数据库执行存储过程出错
		RST_SELECT_INTO			= -101,		// select into出错
		RST_VALUE_OVERFLOW		= -102,		// 值溢出
		RST_DEADLOCK			= -103,		// 死锁

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nMarchTime;				// 行军时间
};
struct CTS_GAMECMD_GET_KICK_CLIENT_ALL_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{

};
struct STC_GAMECMD_GET_KICK_CLIENT_ALL_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	int				nLength;
	// 后面跟字串
};
struct STC_GAMECMD_ALLI_INSTANCE_ACTION_NOTIFY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		AI_ACTION_JOIN			= 1,		// 加入
		AI_ACTION_READY			= 2,		// 准备就绪
		AI_ACTION_UNREADY		= 3,		// 取消准备就绪
		AI_ACTION_EXIT			= 4,		// 退出
		AI_ACTION_KICK			= 5,		// 被踢出
		AI_ACTION_DESTROY		= 6,		// 队长销毁副本
		AI_ACTION_SYS_DESTROY	= 7,		// 系统销毁副本
		AI_ACTION_START			= 8,		// 副本开始,进入副本场景
		AI_ACTION_START_COMBAT	= 9,		// 开始战斗
	};
	tty_id_t		nAccountID;
	tty_id_t		nInstanceID;
	int				nAction;
};
struct STC_GAMECMD_ALLI_INSTANCE_BACK_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	bool			bInstanceDestroyed;
	int				nCombatType;
	tty_id_t		nObjID;
	unsigned int	nInstanceLevel;
	tty_id_t		nEventID;
};
struct CTS_GAMECMD_ALLI_INSTANCE_GET_COMBAT_LOG_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nCombatType;
	tty_id_t		nID;
};
struct STC_GAMECMD_ALLI_INSTANCE_GET_COMBAT_LOG_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{			
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_NO_RECORD			= -220,		// 没有记录
	};
	tty_rst_t		nRst;
	unsigned int	nCombatType;
	tty_id_t		nID;
	// 战报AlliInstanceCombatLog
};
struct CTS_GAMECMD_ALLI_INSTANCE_GET_SIMPLE_COMBAT_LOG_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T 
{
	unsigned int	nCombatType;
	tty_id_t		nInstanceID;
};
struct STC_GAMECMD_ALLI_INSTANCE_GET_SIMPLE_COMBAT_LOG_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T 
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_NO_RECORD			= -220,		// 没有记录
	};
	tty_rst_t		nRst;
	unsigned int	nBackLeftTime;			// 返回倒计时
	unsigned int	nCombatType;
	unsigned int	nCombatResult;
	unsigned int	nInstanceLevel;
	tty_id_t		nInstanceID;
	tty_id_t		nEventID;
};
struct STC_GAMECMD_HERO_SIMPLE_DATA_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		reason_auto_supply		= 1,		// 自动补给
		reason_self_supply		= 2,		// 手动补给
		reason_fight_cost		= 3,		// 战斗损耗
	};
	unsigned int	nCombatType;
	unsigned int	nReason;
	int				nNum;
//	HeroSimpleData[]	heros;
};
struct CTS_GAMECMD_ALLI_INSTANCE_STOP_COMBAT_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nCombatType;
	tty_id_t		nInstanceID;
};
struct STC_GAMECMD_ALLI_INSTANCE_STOP_COMBAT_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_CREATOR			= -1,			// 不是队长

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nCombatType;
	tty_id_t		nInstanceID;
};
struct CTS_GAMECMD_ALLI_INSTANCE_SUPPLY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nCombatType;
	tty_id_t		nInstanceID;
};
struct STC_GAMECMD_ALLI_INSTANCE_SUPPLY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_ERR_STATUS			= -1,			// 副本状态必须为出征,且必须是队长
		RST_SUPPLY_FAILED		= -2,			// 补给失败

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nCombatType;
	tty_id_t		nInstanceID;
};
struct CTS_GAMECMD_ARENA_UPLOAD_DATA_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	int				nSize;
	// 后面跟nSize/sizeof(HeroDeploy)个HeroDeploy
};
struct STC_GAMECMD_ARENA_UPLOAD_DATA_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_LEVEL_LOW			= -1,			// 等级太低
		RST_UPLOAD_FAILED		= -2,			// 上传失败
		RST_CD					= -3,			// CD中
		RST_FORCE_0				= -4,			// 上传-4

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nRank;
	bool			bFirstUpload;	// 是否第一次上传数据
};
struct CTS_GAMECMD_ARENA_GET_RANK_LIST_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nPageSize;
	unsigned int	nPage;
};
struct STC_GAMECMD_ARENA_GET_RANK_LIST_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	struct RankListUnit 
	{
		unsigned int	nRank;
		tty_id_t		nAccountID;
		char			szName[TTY_CHARACTERNAME_LEN];
		unsigned int	nLevel;
		unsigned int	nHeadID;
		unsigned int	nTotalForce;
		char			szAllianceName[TTY_ALLIANCENAME_LEN];
	};
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nTotalNum;
	unsigned int	nPage;
	int				nNum;
};
struct CTS_GAMECMD_ARENA_GET_STATUS_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	// 获取的挑战列表长度
	unsigned int	nNum;
};
struct STC_GAMECMD_ARENA_GET_STATUS_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	struct ChallengeListUnit 
	{
		unsigned int	nRank;
		tty_id_t		nAccountID;
		char			szName[TTY_CHARACTERNAME_LEN];
		unsigned int	nLevel;
		unsigned int	nHeadID;
		unsigned int	nTotalForce;
	};
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nChallengeTimesLeft;	// 今日剩余挑战次数
	unsigned int	nUploadTimeLeft;		// 下一次可以上传镜像的CD
	unsigned int	nPayTimesLeft;			// 付费次数剩余
	unsigned int	nRank;					// 我的排名
	int				nNum;
	// 后面跟nNum个ListUnit
};
struct CTS_GAMECMD_ARENA_PAY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nMoneyType;
	unsigned int	nNum;
};
struct STC_GAMECMD_ARENA_PAY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_FREE_TIMES_LEFT		= -1,		// 还有剩余次数
		RST_NO_PAY_TIMES		= -2,		// 没有付费次数
		RST_DIAMOND_NOT_ENOUGH	= -3,		// 钻石不足
		RST_CRYSTAL_NOT_ENOUGH	= -4,		// 水晶不足
		RST_PAY_FAILED			= -5,		// 付费失败
		RST_PAY_TOO_MANY		= -6,		// 购买次数太多
		RST_ERR_MONEY_TYPE		= -10,		// 货币类型错误

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nMoneyType;
	unsigned int	nPrice;
};
struct CTS_GAMECMD_ARENA_GET_DEPLOY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	
};
struct STC_GAMECMD_ARENA_GET_DEPLOY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_NOT_UPLOAD			= -1,		// 没有上传数据

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nNum;
	// 后面跟ArenaHeroDeploy[nNum]
};
struct CTS_GAMECMD_HERO_SUPPLY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nCombatType;
	unsigned int	nNum;
	// nNum*tty_id_t
};
struct STC_GAMECMD_HERO_SUPPLY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_SUPPLY_ERR			= -1,	// 补给失败

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_TOO_MANY_HERO		= -220,	// 太多英雄
	};
	tty_rst_t		nRst;
};
struct CTS_GAMECMD_OPERATE_SET_VIP_DISPLAY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	bool			bVipDisplay;
};
struct STC_GAMECMD_OPERATE_SET_VIP_DISPLAY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	bool			bVipDisplay;
};
struct CTS_GAMECMD_ALLI_INSTANCE_GET_DEFENDER_DEPLOY_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	unsigned int	nExcelID;			// 副本ID
	unsigned int	nLevel;
};
struct STC_GAMECMD_ALLI_INSTANCE_GET_DEFENDER_DEPLOY_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	struct ArmyUnit
	{
		unsigned int		nArmyType;
		unsigned int		nForce;
		unsigned int		nRow;
		unsigned int		nCol;
	};
	enum
	{
		RST_OK					= 0,
		RST_NOT_EXISTS			= -1,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t		nRst;
	unsigned int	nExcelID;			// 副本ID
	unsigned int	nLevel;
	unsigned int	nNum;
};

// 位置收藏夹
struct CTS_GAMECMD_POSITION_MARK_ADD_RECORD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{
	// PositionMark
};
struct STC_GAMECMD_POSITION_MARK_ADD_RECORD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_FULL				= -1,		// 收藏夹满

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_PROMPT_TOO_LONG		= -220,		// 注释太长
	};
	tty_rst_t	nRst;
};
struct CTS_GAMECMD_POSITION_MARK_CHG_RECORD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T	
{
	// PostionMark
};
struct STC_GAMECMD_POSITION_MARK_CHG_RECORD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,
		RST_FAIL				= -1,		// 修改失败(可能是因为没变化或者记录不存在)

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_PROMPT_TOO_LONG		= -220,		// 注释太长
	};
	tty_rst_t	nRst;
};
struct CTS_GAMECMD_POSITION_MARK_DEL_RECORD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T	
{
	unsigned int	nPosX;
	unsigned int	nPosY;
};
struct STC_GAMECMD_POSITION_MARK_DEL_RECORD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T	
{
	enum
	{
		RST_OK					= 0,
		RST_FAIL				= -1,		// 删除失败(可能是因为记录不存在)

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,

		RST_PROMPT_TOO_LONG		= -220,		// 注释太长
	};
	tty_rst_t	nRst;
};
struct CTS_GAMECMD_POSITION_MARK_GET_RECORD_T : public TTY_CLIENT_LPGAMEPLAY_GAME_CMD_T
{

};
struct STC_GAMECMD_POSITION_MARK_GET_RECORD_T : public TTY_LPGAMEPLAY_CLIENT_GAME_CMD_T
{
	enum
	{
		RST_OK					= 0,

		// 其他错误
		RST_DB_ERR				= -200,
		RST_SQL_ERR				= -201,
	};
	tty_rst_t	nRst;
	int			nNum;
};
#pragma pack()
}

#endif
